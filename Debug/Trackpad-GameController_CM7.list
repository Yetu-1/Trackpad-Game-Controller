
Trackpad-GameController_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007be0  08007be0  00017be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007be4  08007be4  00017be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d0  20000000  08007be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000910  200001d0  08007db8  000201d0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000ae0  08007db8  00020ae0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f525  00000000  00000000  000201fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b1a  00000000  00000000  0003f723  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f40  00000000  00000000  00043240  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000dc8  00000000  00000000  00044180  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b337  00000000  00000000  00044f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001019a  00000000  00000000  0008027f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00172c11  00000000  00000000  00090419  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0020302a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003dcc  00000000  00000000  002030a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200001d0 	.word	0x200001d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007b70 	.word	0x08007b70

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200001d4 	.word	0x200001d4
 80002d4:	08007b70 	.word	0x08007b70

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <up>:
#include "ew_bsp_usb.h"
uint8_t HID_buffer[4] = { 0 };
void up(){
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	HID_buffer[3] = 0;
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <up+0x18>)
 8000412:	2200      	movs	r2, #0
 8000414:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 4);
 8000416:	2204      	movs	r2, #4
 8000418:	4902      	ldr	r1, [pc, #8]	; (8000424 <up+0x18>)
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <up+0x1c>)
 800041c:	f006 fdb2 	bl	8006f84 <USBD_HID_SendReport>
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200001ec 	.word	0x200001ec
 8000428:	20000204 	.word	0x20000204

0800042c <down>:
void down(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	HID_buffer[3] = 2;
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <down+0x18>)
 8000432:	2202      	movs	r2, #2
 8000434:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 4);
 8000436:	2204      	movs	r2, #4
 8000438:	4902      	ldr	r1, [pc, #8]	; (8000444 <down+0x18>)
 800043a:	4803      	ldr	r0, [pc, #12]	; (8000448 <down+0x1c>)
 800043c:	f006 fda2 	bl	8006f84 <USBD_HID_SendReport>
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200001ec 	.word	0x200001ec
 8000448:	20000204 	.word	0x20000204

0800044c <left>:
void left(){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	HID_buffer[3] = 3;
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <left+0x18>)
 8000452:	2203      	movs	r2, #3
 8000454:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 4);
 8000456:	2204      	movs	r2, #4
 8000458:	4902      	ldr	r1, [pc, #8]	; (8000464 <left+0x18>)
 800045a:	4803      	ldr	r0, [pc, #12]	; (8000468 <left+0x1c>)
 800045c:	f006 fd92 	bl	8006f84 <USBD_HID_SendReport>
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200001ec 	.word	0x200001ec
 8000468:	20000204 	.word	0x20000204

0800046c <right>:
void right(){
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	HID_buffer[3] = 1;
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <right+0x18>)
 8000472:	2201      	movs	r2, #1
 8000474:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 4);
 8000476:	2204      	movs	r2, #4
 8000478:	4902      	ldr	r1, [pc, #8]	; (8000484 <right+0x18>)
 800047a:	4803      	ldr	r0, [pc, #12]	; (8000488 <right+0x1c>)
 800047c:	f006 fd82 	bl	8006f84 <USBD_HID_SendReport>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200001ec 	.word	0x200001ec
 8000488:	20000204 	.word	0x20000204

0800048c <keyA>:
void keyA(){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	HID_buffer[3] = 40;
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <keyA+0x18>)
 8000492:	2228      	movs	r2, #40	; 0x28
 8000494:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 4);
 8000496:	2204      	movs	r2, #4
 8000498:	4902      	ldr	r1, [pc, #8]	; (80004a4 <keyA+0x18>)
 800049a:	4803      	ldr	r0, [pc, #12]	; (80004a8 <keyA+0x1c>)
 800049c:	f006 fd72 	bl	8006f84 <USBD_HID_SendReport>
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200001ec 	.word	0x200001ec
 80004a8:	20000204 	.word	0x20000204

080004ac <keyB>:
void keyB(){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	HID_buffer[3] = 72;
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <keyB+0x18>)
 80004b2:	2248      	movs	r2, #72	; 0x48
 80004b4:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 4);
 80004b6:	2204      	movs	r2, #4
 80004b8:	4902      	ldr	r1, [pc, #8]	; (80004c4 <keyB+0x18>)
 80004ba:	4803      	ldr	r0, [pc, #12]	; (80004c8 <keyB+0x1c>)
 80004bc:	f006 fd62 	bl	8006f84 <USBD_HID_SendReport>
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200001ec 	.word	0x200001ec
 80004c8:	20000204 	.word	0x20000204

080004cc <keyY>:
void keyY(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HID_buffer[3] = 136;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <keyY+0x18>)
 80004d2:	2288      	movs	r2, #136	; 0x88
 80004d4:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 4);
 80004d6:	2204      	movs	r2, #4
 80004d8:	4902      	ldr	r1, [pc, #8]	; (80004e4 <keyY+0x18>)
 80004da:	4803      	ldr	r0, [pc, #12]	; (80004e8 <keyY+0x1c>)
 80004dc:	f006 fd52 	bl	8006f84 <USBD_HID_SendReport>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200001ec 	.word	0x200001ec
 80004e8:	20000204 	.word	0x20000204

080004ec <keyX>:
void keyX(){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HID_buffer[3] = 24;
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <keyX+0x18>)
 80004f2:	2218      	movs	r2, #24
 80004f4:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 4);
 80004f6:	2204      	movs	r2, #4
 80004f8:	4902      	ldr	r1, [pc, #8]	; (8000504 <keyX+0x18>)
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <keyX+0x1c>)
 80004fc:	f006 fd42 	bl	8006f84 <USBD_HID_SendReport>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200001ec 	.word	0x200001ec
 8000508:	20000204 	.word	0x20000204

0800050c <release>:
void release(){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HID_buffer[3] = 8;
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <release+0x18>)
 8000512:	2208      	movs	r2, #8
 8000514:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 4);
 8000516:	2204      	movs	r2, #4
 8000518:	4902      	ldr	r1, [pc, #8]	; (8000524 <release+0x18>)
 800051a:	4803      	ldr	r0, [pc, #12]	; (8000528 <release+0x1c>)
 800051c:	f006 fd32 	bl	8006f84 <USBD_HID_SendReport>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200001ec 	.word	0x200001ec
 8000528:	20000204 	.word	0x20000204

0800052c <test>:
void test(){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	 keyY();
 8000530:	f7ff ffcc 	bl	80004cc <keyY>
	 HAL_Delay(700);
 8000534:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000538:	f000 fb2c 	bl	8000b94 <HAL_Delay>
	 release();
 800053c:	f7ff ffe6 	bl	800050c <release>
	 HAL_Delay(700);
 8000540:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000544:	f000 fb26 	bl	8000b94 <HAL_Delay>

	 keyB();
 8000548:	f7ff ffb0 	bl	80004ac <keyB>
	 HAL_Delay(700);
 800054c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000550:	f000 fb20 	bl	8000b94 <HAL_Delay>
	 release();
 8000554:	f7ff ffda 	bl	800050c <release>
	 HAL_Delay(700);
 8000558:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800055c:	f000 fb1a 	bl	8000b94 <HAL_Delay>

	 keyA();
 8000560:	f7ff ff94 	bl	800048c <keyA>
	 HAL_Delay(700);
 8000564:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000568:	f000 fb14 	bl	8000b94 <HAL_Delay>
	 release();
 800056c:	f7ff ffce 	bl	800050c <release>
	 HAL_Delay(700);
 8000570:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000574:	f000 fb0e 	bl	8000b94 <HAL_Delay>

	 keyX();
 8000578:	f7ff ffb8 	bl	80004ec <keyX>
	 HAL_Delay(700);
 800057c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000580:	f000 fb08 	bl	8000b94 <HAL_Delay>
	 release();
 8000584:	f7ff ffc2 	bl	800050c <release>
	 HAL_Delay(700);
 8000588:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800058c:	f000 fb02 	bl	8000b94 <HAL_Delay>

	 up();
 8000590:	f7ff ff3c 	bl	800040c <up>
	 HAL_Delay(700);
 8000594:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000598:	f000 fafc 	bl	8000b94 <HAL_Delay>
	 release();
 800059c:	f7ff ffb6 	bl	800050c <release>
	 HAL_Delay(700);
 80005a0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80005a4:	f000 faf6 	bl	8000b94 <HAL_Delay>

	 right();
 80005a8:	f7ff ff60 	bl	800046c <right>
	 HAL_Delay(700);
 80005ac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80005b0:	f000 faf0 	bl	8000b94 <HAL_Delay>
	 release();
 80005b4:	f7ff ffaa 	bl	800050c <release>
	 HAL_Delay(700);
 80005b8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80005bc:	f000 faea 	bl	8000b94 <HAL_Delay>

	 down();
 80005c0:	f7ff ff34 	bl	800042c <down>
	 HAL_Delay(700);
 80005c4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80005c8:	f000 fae4 	bl	8000b94 <HAL_Delay>
	 release();
 80005cc:	f7ff ff9e 	bl	800050c <release>
	 HAL_Delay(700);
 80005d0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80005d4:	f000 fade 	bl	8000b94 <HAL_Delay>

	 left();
 80005d8:	f7ff ff38 	bl	800044c <left>
	 HAL_Delay(700);
 80005dc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80005e0:	f000 fad8 	bl	8000b94 <HAL_Delay>
	 release();
 80005e4:	f7ff ff92 	bl	800050c <release>
	 HAL_Delay(700);
 80005e8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80005ec:	f000 fad2 	bl	8000b94 <HAL_Delay>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80005fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000600:	bf00      	nop
 8000602:	4b22      	ldr	r3, [pc, #136]	; (800068c <main+0x98>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d004      	beq.n	8000618 <main+0x24>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	dcf4      	bgt.n	8000602 <main+0xe>
  if ( timeout < 0 )
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	da01      	bge.n	8000622 <main+0x2e>
  {
  Error_Handler();
 800061e:	f000 f96d 	bl	80008fc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fa25 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f833 	bl	8000690 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <main+0x98>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000630:	4a16      	ldr	r2, [pc, #88]	; (800068c <main+0x98>)
 8000632:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <main+0x98>)
 800063c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000648:	2000      	movs	r0, #0
 800064a:	f000 fd91 	bl	8001170 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800064e:	2100      	movs	r1, #0
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fda7 	bl	80011a4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800065c:	bf00      	nop
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <main+0x98>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000666:	2b00      	cmp	r3, #0
 8000668:	d104      	bne.n	8000674 <main+0x80>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	dcf4      	bgt.n	800065e <main+0x6a>
if ( timeout < 0 )
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	da01      	bge.n	800067e <main+0x8a>
{
Error_Handler();
 800067a:	f000 f93f 	bl	80008fc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f8bf 	bl	8000800 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000682:	f006 fd57 	bl	8007134 <MX_USB_DEVICE_Init>


  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  while(1){
    test();
 8000686:	f7ff ff51 	bl	800052c <test>
 800068a:	e7fc      	b.n	8000686 <main+0x92>
 800068c:	58024400 	.word	0x58024400

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b0cc      	sub	sp, #304	; 0x130
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800069a:	224c      	movs	r2, #76	; 0x4c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f007 f9a4 	bl	80079ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006a8:	2220      	movs	r2, #32
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f007 f99d 	bl	80079ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	4618      	mov	r0, r3
 80006b8:	23bc      	movs	r3, #188	; 0xbc
 80006ba:	461a      	mov	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f007 f995 	bl	80079ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006c2:	2004      	movs	r0, #4
 80006c4:	f001 ff46 	bl	8002554 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	4b4a      	ldr	r3, [pc, #296]	; (80007f8 <SystemClock_Config+0x168>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a49      	ldr	r2, [pc, #292]	; (80007f8 <SystemClock_Config+0x168>)
 80006d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <SystemClock_Config+0x168>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	4b45      	ldr	r3, [pc, #276]	; (80007fc <SystemClock_Config+0x16c>)
 80006e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ea:	4a44      	ldr	r2, [pc, #272]	; (80007fc <SystemClock_Config+0x16c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006f2:	4b42      	ldr	r3, [pc, #264]	; (80007fc <SystemClock_Config+0x16c>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	f003 0201 	and.w	r2, r3, #1
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000702:	bf00      	nop
 8000704:	4b3c      	ldr	r3, [pc, #240]	; (80007f8 <SystemClock_Config+0x168>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800070c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000710:	d1f8      	bne.n	8000704 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000712:	2321      	movs	r3, #33	; 0x21
 8000714:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072c:	2302      	movs	r3, #2
 800072e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000732:	2305      	movs	r3, #5
 8000734:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000738:	23c0      	movs	r3, #192	; 0xc0
 800073a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800074a:	2304      	movs	r3, #4
 800074c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000750:	2308      	movs	r3, #8
 8000752:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000766:	4618      	mov	r0, r3
 8000768:	f001 ff5e 	bl	8002628 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000772:	f000 f8c3 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	233f      	movs	r3, #63	; 0x3f
 8000778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2303      	movs	r3, #3
 800077e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000788:	2308      	movs	r3, #8
 800078a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800078e:	2340      	movs	r3, #64	; 0x40
 8000790:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800079a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a2:	2340      	movs	r3, #64	; 0x40
 80007a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007ac:	2104      	movs	r1, #4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fb4a 	bl	8002e48 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80007ba:	f000 f89f 	bl	80008fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007c6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 fe8d 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 80007e4:	f000 f88a 	bl	80008fc <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80007e8:	f001 ff0e 	bl	8002608 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80007ec:	bf00      	nop
 80007ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800
 80007fc:	58000400 	.word	0x58000400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <MX_GPIO_Init+0xec>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	4a33      	ldr	r2, [pc, #204]	; (80008ec <MX_GPIO_Init+0xec>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <MX_GPIO_Init+0xec>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_GPIO_Init+0xec>)
 8000836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083a:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <MX_GPIO_Init+0xec>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <MX_GPIO_Init+0xec>)
 8000846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <MX_GPIO_Init+0xec>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	4a24      	ldr	r2, [pc, #144]	; (80008ec <MX_GPIO_Init+0xec>)
 800085a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <MX_GPIO_Init+0xec>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_GPIO_Init+0xec>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000876:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <MX_GPIO_Init+0xec>)
 8000878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800087c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_GPIO_Init+0xec>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 800088e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4813      	ldr	r0, [pc, #76]	; (80008f0 <MX_GPIO_Init+0xf0>)
 80008a4:	f000 fab4 	bl	8000e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_GPIO_Init+0xf4>)
 80008c2:	f000 faa5 	bl	8000e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_GPIO_Init+0xf8>)
 80008e0:	f000 fa96 	bl	8000e10 <HAL_GPIO_Init>

}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58024400 	.word	0x58024400
 80008f0:	58020000 	.word	0x58020000
 80008f4:	58020800 	.word	0x58020800
 80008f8:	58022000 	.word	0x58022000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_MspInit+0x30>)
 8000914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000918:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_MspInit+0x30>)
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_MspInit+0x30>)
 8000924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000928:	f003 0302 	and.w	r3, r3, #2
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	58024400 	.word	0x58024400

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 f8de 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <OTG_FS_IRQHandler+0x10>)
 80009a2:	f000 fd6a 	bl	800147a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200006d4 	.word	0x200006d4

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f006 ffca 	bl	8007978 <__errno>
 80009e4:	4602      	mov	r2, r0
 80009e6:	230c      	movs	r3, #12
 80009e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20020000 	.word	0x20020000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	200001f0 	.word	0x200001f0
 8000a18:	20000ae0 	.word	0x20000ae0

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a54 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a20:	f7ff fc5a 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a26:	e003      	b.n	8000a30 <LoopCopyDataInit>

08000a28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000a2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a2e:	3104      	adds	r1, #4

08000a30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a30:	480a      	ldr	r0, [pc, #40]	; (8000a5c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000a34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a38:	d3f6      	bcc.n	8000a28 <CopyDataInit>
  ldr  r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000a3c:	e002      	b.n	8000a44 <LoopFillZerobss>

08000a3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a40:	f842 3b04 	str.w	r3, [r2], #4

08000a44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000a46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a48:	d3f9      	bcc.n	8000a3e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f006 ff9b 	bl	8007984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fdd1 	bl	80005f4 <main>
  bx  lr    
 8000a52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a58:	08007be8 	.word	0x08007be8
  ldr  r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a60:	200001d0 	.word	0x200001d0
  ldr  r2, =_sbss
 8000a64:	200001d0 	.word	0x200001d0
  ldr  r3, = _ebss
 8000a68:	20000ae0 	.word	0x20000ae0

08000a6c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC3_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 f98a 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a7c:	f002 fb9a 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8000a80:	4601      	mov	r1, r0
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_Init+0x68>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	0a1b      	lsrs	r3, r3, #8
 8000a88:	f003 030f 	and.w	r3, r3, #15
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_Init+0x6c>)
 8000a8e:	5cd3      	ldrb	r3, [r2, r3]
 8000a90:	f003 031f 	and.w	r3, r3, #31
 8000a94:	fa21 f303 	lsr.w	r3, r1, r3
 8000a98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_Init+0x68>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_Init+0x6c>)
 8000aa4:	5cd3      	ldrb	r3, [r2, r3]
 8000aa6:	f003 031f 	and.w	r3, r3, #31
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab0:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <HAL_Init+0x70>)
 8000ab2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <HAL_Init+0x74>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 f814 	bl	8000ae8 <HAL_InitTick>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e002      	b.n	8000ad0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aca:	f7ff ff1f 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	58024400 	.word	0x58024400
 8000adc:	08007bd0 	.word	0x08007bd0
 8000ae0:	20000004 	.word	0x20000004
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_InitTick+0x60>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d101      	bne.n	8000afc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e021      	b.n	8000b40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <HAL_InitTick+0x64>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_InitTick+0x60>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f96f 	bl	8000df6 <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f939 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_InitTick+0x68>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	2000000c 	.word	0x2000000c
 8000b78:	20000200 	.word	0x20000200

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000200 	.word	0x20000200

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_Delay+0x40>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bba:	bf00      	nop
 8000bbc:	f7ff ffde 	bl	8000b7c <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000000c 	.word	0x2000000c

08000bd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetREVID+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	0c1b      	lsrs	r3, r3, #16
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	5c001000 	.word	0x5c001000

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <__NVIC_SetPriorityGrouping+0x40>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x40>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00
 8000c34:	05fa0000 	.word	0x05fa0000

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff29 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff40 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff90 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5f 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff33 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffa4 	bl	8000d4c <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e1e:	4b89      	ldr	r3, [pc, #548]	; (8001044 <HAL_GPIO_Init+0x234>)
 8000e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e22:	e194      	b.n	800114e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8186 	beq.w	8001148 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d00b      	beq.n	8000e5c <HAL_GPIO_Init+0x4c>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d007      	beq.n	8000e5c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e50:	2b11      	cmp	r3, #17
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b12      	cmp	r3, #18
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0xee>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d123      	bne.n	8000f46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	69b9      	ldr	r1, [r7, #24]
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0203 	and.w	r2, r3, #3
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80e0 	beq.w	8001148 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <HAL_GPIO_Init+0x238>)
 8000f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f8e:	4a2e      	ldr	r2, [pc, #184]	; (8001048 <HAL_GPIO_Init+0x238>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <HAL_GPIO_Init+0x238>)
 8000f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa6:	4a29      	ldr	r2, [pc, #164]	; (800104c <HAL_GPIO_Init+0x23c>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a20      	ldr	r2, [pc, #128]	; (8001050 <HAL_GPIO_Init+0x240>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d052      	beq.n	8001078 <HAL_GPIO_Init+0x268>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <HAL_GPIO_Init+0x244>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d031      	beq.n	800103e <HAL_GPIO_Init+0x22e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <HAL_GPIO_Init+0x248>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d02b      	beq.n	800103a <HAL_GPIO_Init+0x22a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_GPIO_Init+0x24c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0x226>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_GPIO_Init+0x250>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01f      	beq.n	8001032 <HAL_GPIO_Init+0x222>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <HAL_GPIO_Init+0x254>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x21e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <HAL_GPIO_Init+0x258>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x21a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_GPIO_Init+0x25c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x216>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a18      	ldr	r2, [pc, #96]	; (8001070 <HAL_GPIO_Init+0x260>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x212>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_GPIO_Init+0x264>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x20e>
 800101a:	2309      	movs	r3, #9
 800101c:	e02d      	b.n	800107a <HAL_GPIO_Init+0x26a>
 800101e:	230a      	movs	r3, #10
 8001020:	e02b      	b.n	800107a <HAL_GPIO_Init+0x26a>
 8001022:	2308      	movs	r3, #8
 8001024:	e029      	b.n	800107a <HAL_GPIO_Init+0x26a>
 8001026:	2307      	movs	r3, #7
 8001028:	e027      	b.n	800107a <HAL_GPIO_Init+0x26a>
 800102a:	2306      	movs	r3, #6
 800102c:	e025      	b.n	800107a <HAL_GPIO_Init+0x26a>
 800102e:	2305      	movs	r3, #5
 8001030:	e023      	b.n	800107a <HAL_GPIO_Init+0x26a>
 8001032:	2304      	movs	r3, #4
 8001034:	e021      	b.n	800107a <HAL_GPIO_Init+0x26a>
 8001036:	2303      	movs	r3, #3
 8001038:	e01f      	b.n	800107a <HAL_GPIO_Init+0x26a>
 800103a:	2302      	movs	r3, #2
 800103c:	e01d      	b.n	800107a <HAL_GPIO_Init+0x26a>
 800103e:	2301      	movs	r3, #1
 8001040:	e01b      	b.n	800107a <HAL_GPIO_Init+0x26a>
 8001042:	bf00      	nop
 8001044:	58000080 	.word	0x58000080
 8001048:	58024400 	.word	0x58024400
 800104c:	58000400 	.word	0x58000400
 8001050:	58020000 	.word	0x58020000
 8001054:	58020400 	.word	0x58020400
 8001058:	58020800 	.word	0x58020800
 800105c:	58020c00 	.word	0x58020c00
 8001060:	58021000 	.word	0x58021000
 8001064:	58021400 	.word	0x58021400
 8001068:	58021800 	.word	0x58021800
 800106c:	58021c00 	.word	0x58021c00
 8001070:	58022000 	.word	0x58022000
 8001074:	58022400 	.word	0x58022400
 8001078:	2300      	movs	r3, #0
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	f002 0203 	and.w	r2, r2, #3
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	4093      	lsls	r3, r2
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108a:	4938      	ldr	r1, [pc, #224]	; (800116c <HAL_GPIO_Init+0x35c>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800111a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	3301      	adds	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa22 f303 	lsr.w	r3, r2, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	f47f ae63 	bne.w	8000e24 <HAL_GPIO_Init+0x14>
  }
}
 800115e:	bf00      	nop
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	58000400 	.word	0x58000400

08001170 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_HSEM_FastTake+0x2c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3320      	adds	r3, #32
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_HSEM_FastTake+0x30>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d101      	bne.n	800118c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	e000      	b.n	800118e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	58026400 	.word	0x58026400
 80011a0:	80000300 	.word	0x80000300

080011a4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80011ae:	4906      	ldr	r1, [pc, #24]	; (80011c8 <HAL_HSEM_Release+0x24>)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	58026400 	.word	0x58026400

080011cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	b08f      	sub	sp, #60	; 0x3c
 80011d0:	af0a      	add	r7, sp, #40	; 0x28
 80011d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e116      	b.n	800140c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f006 f8d1 	bl	80073a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2203      	movs	r2, #3
 8001202:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f003 fad2 	bl	80047c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	687e      	ldr	r6, [r7, #4]
 800122a:	466d      	mov	r5, sp
 800122c:	f106 0410 	add.w	r4, r6, #16
 8001230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001238:	e894 0003 	ldmia.w	r4, {r0, r1}
 800123c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001240:	1d33      	adds	r3, r6, #4
 8001242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f003 f9a9 	bl	800459c <USB_CoreInit>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0d7      	b.n	800140c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f003 fac0 	bl	80047e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e04a      	b.n	8001304 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	333d      	adds	r3, #61	; 0x3d
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	1a9b      	subs	r3, r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	440b      	add	r3, r1
 8001290:	333c      	adds	r3, #60	; 0x3c
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	b298      	uxth	r0, r3
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	1a9b      	subs	r3, r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	3342      	adds	r3, #66	; 0x42
 80012aa:	4602      	mov	r2, r0
 80012ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	1a9b      	subs	r3, r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	333f      	adds	r3, #63	; 0x3f
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	3344      	adds	r3, #68	; 0x44
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	3348      	adds	r3, #72	; 0x48
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	3350      	adds	r3, #80	; 0x50
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d3af      	bcc.n	800126e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e044      	b.n	800139e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	1a9b      	subs	r3, r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	3301      	adds	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3b5      	bcc.n	8001314 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	687e      	ldr	r6, [r7, #4]
 80013b0:	466d      	mov	r5, sp
 80013b2:	f106 0410 	add.w	r4, r6, #16
 80013b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80013c6:	1d33      	adds	r3, r6, #4
 80013c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ca:	6838      	ldr	r0, [r7, #0]
 80013cc:	f003 fa36 	bl	800483c <USB_DevInit>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2202      	movs	r2, #2
 80013da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e014      	b.n	800140c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d102      	bne.n	8001400 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f001 f87a 	bl	80024f4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f004 fa75 	bl	80058f4 <USB_DevDisconnect>

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001414 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_PCD_Start+0x1c>
 800142c:	2302      	movs	r3, #2
 800142e:	e020      	b.n	8001472 <HAL_PCD_Start+0x5e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	2b01      	cmp	r3, #1
 800143e:	d109      	bne.n	8001454 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001444:	2b01      	cmp	r3, #1
 8001446:	d005      	beq.n	8001454 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f004 fa33 	bl	80058c4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 f99e 	bl	80047a4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800147a:	b590      	push	{r4, r7, lr}
 800147c:	b08d      	sub	sp, #52	; 0x34
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f004 fada 	bl	8005a4a <USB_GetMode>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	f040 83ca 	bne.w	8001c32 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f004 fa3e 	bl	8005924 <USB_ReadInterrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 83c0 	beq.w	8001c30 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 fa35 	bl	8005924 <USB_ReadInterrupts>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d107      	bne.n	80014d4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f002 0202 	and.w	r2, r2, #2
 80014d2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 fa23 	bl	8005924 <USB_ReadInterrupts>
 80014de:	4603      	mov	r3, r0
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	2b10      	cmp	r3, #16
 80014e6:	d161      	bne.n	80015ac <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699a      	ldr	r2, [r3, #24]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0210 	bic.w	r2, r2, #16
 80014f6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	f003 020f 	and.w	r2, r3, #15
 8001504:	4613      	mov	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	3304      	adds	r3, #4
 8001516:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	0c5b      	lsrs	r3, r3, #17
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	2b02      	cmp	r3, #2
 8001522:	d124      	bne.n	800156e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d035      	beq.n	800159c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800153a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800153e:	b29b      	uxth	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	6a38      	ldr	r0, [r7, #32]
 8001544:	f004 f89b 	bl	800567e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001554:	441a      	add	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001566:	441a      	add	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	619a      	str	r2, [r3, #24]
 800156c:	e016      	b.n	800159c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	0c5b      	lsrs	r3, r3, #17
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	2b06      	cmp	r3, #6
 8001578:	d110      	bne.n	800159c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001580:	2208      	movs	r2, #8
 8001582:	4619      	mov	r1, r3
 8001584:	6a38      	ldr	r0, [r7, #32]
 8001586:	f004 f87a 	bl	800567e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001596:	441a      	add	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0210 	orr.w	r2, r2, #16
 80015aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 f9b7 	bl	8005924 <USB_ReadInterrupts>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015c0:	d16e      	bne.n	80016a0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 f9bd 	bl	800594a <USB_ReadDevAllOutEpInterrupt>
 80015d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015d2:	e062      	b.n	800169a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d057      	beq.n	800168e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 f9e2 	bl	80059b2 <USB_ReadDevOutEPInterrupt>
 80015ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00c      	beq.n	8001614 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	015a      	lsls	r2, r3, #5
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	4413      	add	r3, r2
 8001602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001606:	461a      	mov	r2, r3
 8001608:	2301      	movs	r3, #1
 800160a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800160c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fdc6 	bl	80021a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00c      	beq.n	8001638 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162a:	461a      	mov	r2, r3
 800162c:	2308      	movs	r3, #8
 800162e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fec0 	bl	80023b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800164e:	461a      	mov	r2, r3
 8001650:	2310      	movs	r3, #16
 8001652:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0320 	and.w	r3, r3, #32
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800166a:	461a      	mov	r2, r3
 800166c:	2320      	movs	r3, #32
 800166e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4413      	add	r3, r2
 8001682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001686:	461a      	mov	r2, r3
 8001688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169c:	2b00      	cmp	r3, #0
 800169e:	d199      	bne.n	80015d4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 f93d 	bl	8005924 <USB_ReadInterrupts>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016b4:	f040 80c0 	bne.w	8001838 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 f95e 	bl	800597e <USB_ReadDevAllInEpInterrupt>
 80016c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016c8:	e0b2      	b.n	8001830 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a7 	beq.w	8001824 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 f984 	bl	80059ee <USB_ReadDevInEPInterrupt>
 80016e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d057      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	2201      	movs	r2, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	69f9      	ldr	r1, [r7, #28]
 800170e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001712:	4013      	ands	r3, r2
 8001714:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001722:	461a      	mov	r2, r3
 8001724:	2301      	movs	r3, #1
 8001726:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d132      	bne.n	8001796 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001734:	4613      	mov	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	3348      	adds	r3, #72	; 0x48
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4403      	add	r3, r0
 8001750:	3344      	adds	r3, #68	; 0x44
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4419      	add	r1, r3
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4403      	add	r3, r0
 8001764:	3348      	adds	r3, #72	; 0x48
 8001766:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	2b00      	cmp	r3, #0
 800176c:	d113      	bne.n	8001796 <HAL_PCD_IRQHandler+0x31c>
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3350      	adds	r3, #80	; 0x50
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d108      	bne.n	8001796 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800178e:	461a      	mov	r2, r3
 8001790:	2101      	movs	r1, #1
 8001792:	f004 f98d 	bl	8005ab0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4619      	mov	r1, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f005 fe7e 	bl	800749e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	015a      	lsls	r2, r3, #5
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b8:	461a      	mov	r2, r3
 80017ba:	2308      	movs	r3, #8
 80017bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d4:	461a      	mov	r2, r3
 80017d6:	2310      	movs	r3, #16
 80017d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f0:	461a      	mov	r2, r3
 80017f2:	2340      	movs	r3, #64	; 0x40
 80017f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	015a      	lsls	r2, r3, #5
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800180c:	461a      	mov	r2, r3
 800180e:	2302      	movs	r3, #2
 8001810:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800181c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fc30 	bl	8002084 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3301      	adds	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800182a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001832:	2b00      	cmp	r3, #0
 8001834:	f47f af49 	bne.w	80016ca <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f004 f871 	bl	8005924 <USB_ReadInterrupts>
 8001842:	4603      	mov	r3, r0
 8001844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800184c:	d122      	bne.n	8001894 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001868:	2b01      	cmp	r3, #1
 800186a:	d108      	bne.n	800187e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001874:	2100      	movs	r1, #0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fe60 	bl	800253c <HAL_PCDEx_LPM_Callback>
 800187c:	e002      	b.n	8001884 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f005 fe84 	bl	800758c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f004 f843 	bl	8005924 <USB_ReadInterrupts>
 800189e:	4603      	mov	r3, r0
 80018a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018a8:	d112      	bne.n	80018d0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d102      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f005 fe40 	bl	8007540 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018ce:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f004 f825 	bl	8005924 <USB_ReadInterrupts>
 80018da:	4603      	mov	r3, r0
 80018dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018e4:	d121      	bne.n	800192a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80018f4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d111      	bne.n	8001924 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	f003 020f 	and.w	r2, r3, #15
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800191a:	2101      	movs	r1, #1
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fe0d 	bl	800253c <HAL_PCDEx_LPM_Callback>
 8001922:	e002      	b.n	800192a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f005 fe0b 	bl	8007540 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 fff8 	bl	8005924 <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800193e:	f040 80c7 	bne.w	8001ad0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2110      	movs	r1, #16
 800195c:	4618      	mov	r0, r3
 800195e:	f003 f8cb 	bl	8004af8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001966:	e056      	b.n	8001a16 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001974:	461a      	mov	r2, r3
 8001976:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800197a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	015a      	lsls	r2, r3, #5
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	4413      	add	r3, r2
 8001984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198c:	0151      	lsls	r1, r2, #5
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	440a      	add	r2, r1
 8001992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800199a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ac:	0151      	lsls	r1, r2, #5
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	440a      	add	r2, r1
 80019b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019c8:	461a      	mov	r2, r3
 80019ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d2:	015a      	lsls	r2, r3, #5
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e0:	0151      	lsls	r1, r2, #5
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	440a      	add	r2, r1
 80019e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a00:	0151      	lsls	r1, r2, #5
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	440a      	add	r2, r1
 8001a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a12:	3301      	adds	r3, #1
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d3a3      	bcc.n	8001968 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a2e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a32:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d016      	beq.n	8001a6a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a4c:	f043 030b 	orr.w	r3, r3, #11
 8001a50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a62:	f043 030b 	orr.w	r3, r3, #11
 8001a66:	6453      	str	r3, [r2, #68]	; 0x44
 8001a68:	e015      	b.n	8001a96 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f242 032b 	movw	r3, #8235	; 0x202b
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a90:	f043 030b 	orr.w	r3, r3, #11
 8001a94:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aa4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001aa8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001aba:	461a      	mov	r2, r3
 8001abc:	f003 fff8 	bl	8005ab0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 ff25 	bl	8005924 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae4:	d124      	bne.n	8001b30 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 ffbc 	bl	8005a68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 f860 	bl	8004bba <USB_GetDevSpeed>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681c      	ldr	r4, [r3, #0]
 8001b06:	f001 fcc7 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 8001b0a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	4620      	mov	r0, r4
 8001b16:	f002 fda3 	bl	8004660 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f005 fce7 	bl	80074ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 fef5 	bl	8005924 <USB_ReadInterrupts>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d10a      	bne.n	8001b5a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f005 fcc4 	bl	80074d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f002 0208 	and.w	r2, r2, #8
 8001b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fee0 	bl	8005924 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b6e:	d10f      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f005 fd26 	bl	80075cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 fec5 	bl	8005924 <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f005 fcf9 	bl	80075a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 feaa 	bl	8005924 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bda:	d10a      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f005 fd07 	bl	80075f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fe94 	bl	8005924 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d115      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f005 fcf7 	bl	800760c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	e000      	b.n	8001c32 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001c30:	bf00      	nop
    }
  }
}
 8001c32:	3734      	adds	r7, #52	; 0x34
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd90      	pop	{r4, r7, pc}

08001c38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_PCD_SetAddress+0x1a>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e013      	b.n	8001c7a <HAL_PCD_SetAddress+0x42>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	78fa      	ldrb	r2, [r7, #3]
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fe04 	bl	8005878 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	4608      	mov	r0, r1
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4603      	mov	r3, r0
 8001c92:	70fb      	strb	r3, [r7, #3]
 8001c94:	460b      	mov	r3, r1
 8001c96:	803b      	strh	r3, [r7, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	da0f      	bge.n	8001cc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	3338      	adds	r3, #56	; 0x38
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	705a      	strb	r2, [r3, #1]
 8001cc6:	e00f      	b.n	8001ce8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 020f 	and.w	r2, r3, #15
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cf4:	883a      	ldrh	r2, [r7, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	78ba      	ldrb	r2, [r7, #2]
 8001cfe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	785b      	ldrb	r3, [r3, #1]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d12:	78bb      	ldrb	r3, [r7, #2]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d102      	bne.n	8001d1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_PCD_EP_Open+0xaa>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e00e      	b.n	8001d4a <HAL_PCD_EP_Open+0xc8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 ff62 	bl	8004c04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d48:	7afb      	ldrb	r3, [r7, #11]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da0f      	bge.n	8001d86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	3338      	adds	r3, #56	; 0x38
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	705a      	strb	r2, [r3, #1]
 8001d84:	e00f      	b.n	8001da6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 020f 	and.w	r2, r3, #15
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_PCD_EP_Close+0x6e>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e00e      	b.n	8001dde <HAL_PCD_EP_Close+0x8c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 ffa0 	bl	8004d14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	460b      	mov	r3, r1
 8001df4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df6:	7afb      	ldrb	r3, [r7, #11]
 8001df8:	f003 020f 	and.w	r2, r3, #15
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2200      	movs	r2, #0
 8001e26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e42:	7afb      	ldrb	r3, [r7, #11]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d109      	bne.n	8001e60 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	6979      	ldr	r1, [r7, #20]
 8001e5a:	f003 fa83 	bl	8005364 <USB_EP0StartXfer>
 8001e5e:	e008      	b.n	8001e72 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6979      	ldr	r1, [r7, #20]
 8001e6e:	f003 f82d 	bl	8004ecc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	f003 020f 	and.w	r2, r3, #15
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	3338      	adds	r3, #56	; 0x38
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	6979      	ldr	r1, [r7, #20]
 8001eee:	f003 fa39 	bl	8005364 <USB_EP0StartXfer>
 8001ef2:	e008      	b.n	8001f06 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	6979      	ldr	r1, [r7, #20]
 8001f02:	f002 ffe3 	bl	8004ecc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 020f 	and.w	r2, r3, #15
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d901      	bls.n	8001f2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e050      	b.n	8001fd0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	da0f      	bge.n	8001f56 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 020f 	and.w	r2, r3, #15
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	3338      	adds	r3, #56	; 0x38
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	705a      	strb	r2, [r3, #1]
 8001f54:	e00d      	b.n	8001f72 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4413      	add	r3, r2
 8001f68:	3304      	adds	r3, #4
 8001f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_PCD_EP_SetStall+0x82>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e01e      	b.n	8001fd0 <HAL_PCD_EP_SetStall+0xc0>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fb95 	bl	80056d0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	b2d9      	uxtb	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f003 fd75 	bl	8005ab0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 020f 	and.w	r2, r3, #15
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d901      	bls.n	8001ff6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e042      	b.n	800207c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	da0f      	bge.n	800201e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	3338      	adds	r3, #56	; 0x38
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	3304      	adds	r3, #4
 8002014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	705a      	strb	r2, [r3, #1]
 800201c:	e00f      	b.n	800203e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 020f 	and.w	r2, r3, #15
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	b2da      	uxtb	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_PCD_EP_ClrStall+0x86>
 800205a:	2302      	movs	r3, #2
 800205c:	e00e      	b.n	800207c <HAL_PCD_EP_ClrStall+0xa4>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68f9      	ldr	r1, [r7, #12]
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fb9d 	bl	80057ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af02      	add	r7, sp, #8
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	3338      	adds	r3, #56	; 0x38
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	3304      	adds	r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d901      	bls.n	80020bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e06c      	b.n	8002196 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d902      	bls.n	80020d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	3303      	adds	r3, #3
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020e0:	e02b      	b.n	800213a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d902      	bls.n	80020fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3303      	adds	r3, #3
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68d9      	ldr	r1, [r3, #12]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002116:	b2db      	uxtb	r3, r3
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	4603      	mov	r3, r0
 800211c:	6978      	ldr	r0, [r7, #20]
 800211e:	f003 fa79 	bl	8005614 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	441a      	add	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	441a      	add	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	b29b      	uxth	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	429a      	cmp	r2, r3
 800214e:	d809      	bhi.n	8002164 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002158:	429a      	cmp	r2, r3
 800215a:	d203      	bcs.n	8002164 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1be      	bne.n	80020e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	429a      	cmp	r2, r3
 800216e:	d811      	bhi.n	8002194 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	2201      	movs	r2, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	43db      	mvns	r3, r3
 800218a:	6939      	ldr	r1, [r7, #16]
 800218c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002190:	4013      	ands	r3, r2
 8002192:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	333c      	adds	r3, #60	; 0x3c
 80021b8:	3304      	adds	r3, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	f040 80a0 	bne.w	8002318 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d015      	beq.n	800220e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a72      	ldr	r2, [pc, #456]	; (80023b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	f240 80dd 	bls.w	80023a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80d7 	beq.w	80023a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002204:	461a      	mov	r2, r3
 8002206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220a:	6093      	str	r3, [r2, #8]
 800220c:	e0cb      	b.n	80023a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002224:	461a      	mov	r2, r3
 8002226:	2320      	movs	r3, #32
 8002228:	6093      	str	r3, [r2, #8]
 800222a:	e0bc      	b.n	80023a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 80b7 	bne.w	80023a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a5d      	ldr	r2, [pc, #372]	; (80023b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d90f      	bls.n	8002260 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002256:	461a      	mov	r2, r3
 8002258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800225c:	6093      	str	r3, [r2, #8]
 800225e:	e0a2      	b.n	80023a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002272:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	0159      	lsls	r1, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	440b      	add	r3, r1
 800227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002286:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4403      	add	r3, r0
 8002296:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800229a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4403      	add	r3, r0
 80022be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4419      	add	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4403      	add	r3, r0
 80022d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d114      	bne.n	800230a <PCD_EP_OutXfrComplete_int+0x16a>
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d108      	bne.n	800230a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002302:	461a      	mov	r2, r3
 8002304:	2101      	movs	r1, #1
 8002306:	f003 fbd3 	bl	8005ab0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	4619      	mov	r1, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f005 f8a9 	bl	8007468 <HAL_PCD_DataOutStageCallback>
 8002316:	e046      	b.n	80023a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d124      	bne.n	800236a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002336:	461a      	mov	r2, r3
 8002338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233c:	6093      	str	r3, [r2, #8]
 800233e:	e032      	b.n	80023a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002356:	461a      	mov	r2, r3
 8002358:	2320      	movs	r3, #32
 800235a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f005 f880 	bl	8007468 <HAL_PCD_DataOutStageCallback>
 8002368:	e01d      	b.n	80023a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d114      	bne.n	800239a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d108      	bne.n	800239a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002392:	461a      	mov	r2, r3
 8002394:	2100      	movs	r1, #0
 8002396:	f003 fb8b 	bl	8005ab0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f005 f861 	bl	8007468 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	4f54300a 	.word	0x4f54300a
 80023b4:	4f54310a 	.word	0x4f54310a

080023b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	333c      	adds	r3, #60	; 0x3c
 80023d0:	3304      	adds	r3, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4a15      	ldr	r2, [pc, #84]	; (8002440 <PCD_EP_OutSetupPacket_int+0x88>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d90e      	bls.n	800240c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d009      	beq.n	800240c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002404:	461a      	mov	r2, r3
 8002406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800240a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f005 f819 	bl	8007444 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <PCD_EP_OutSetupPacket_int+0x88>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d90c      	bls.n	8002434 <PCD_EP_OutSetupPacket_int+0x7c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d108      	bne.n	8002434 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800242c:	461a      	mov	r2, r3
 800242e:	2101      	movs	r1, #1
 8002430:	f003 fb3e 	bl	8005ab0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	4f54300a 	.word	0x4f54300a

08002444 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
 8002450:	4613      	mov	r3, r2
 8002452:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002462:	883b      	ldrh	r3, [r7, #0]
 8002464:	0419      	lsls	r1, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	430a      	orrs	r2, r1
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
 8002470:	e028      	b.n	80024c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	4413      	add	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e00d      	b.n	80024a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	3340      	adds	r3, #64	; 0x40
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	4413      	add	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	3301      	adds	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d3ec      	bcc.n	8002486 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024ac:	883b      	ldrh	r3, [r7, #0]
 80024ae:	0418      	lsls	r0, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	4302      	orrs	r2, r0
 80024bc:	3340      	adds	r3, #64	; 0x40
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <HAL_PCDEx_ActivateLPM+0x44>)
 8002524:	4313      	orrs	r3, r2
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	10000003 	.word	0x10000003

0800253c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800255c:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_PWREx_ConfigSupply+0xb0>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	2b06      	cmp	r3, #6
 8002566:	d00a      	beq.n	800257e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_PWREx_ConfigSupply+0xb0>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e040      	b.n	80025fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e03e      	b.n	80025fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800257e:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_PWREx_ConfigSupply+0xb0>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002586:	491f      	ldr	r1, [pc, #124]	; (8002604 <HAL_PWREx_ConfigSupply+0xb0>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4313      	orrs	r3, r2
 800258c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800258e:	f7fe faf5 	bl	8000b7c <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002594:	e009      	b.n	80025aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002596:	f7fe faf1 	bl	8000b7c <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025a4:	d901      	bls.n	80025aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e028      	b.n	80025fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_PWREx_ConfigSupply+0xb0>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b6:	d1ee      	bne.n	8002596 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b1e      	cmp	r3, #30
 80025bc:	d008      	beq.n	80025d0 <HAL_PWREx_ConfigSupply+0x7c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b2e      	cmp	r3, #46	; 0x2e
 80025c2:	d005      	beq.n	80025d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b1d      	cmp	r3, #29
 80025c8:	d002      	beq.n	80025d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b2d      	cmp	r3, #45	; 0x2d
 80025ce:	d114      	bne.n	80025fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80025d0:	f7fe fad4 	bl	8000b7c <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025d6:	e009      	b.n	80025ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025d8:	f7fe fad0 	bl	8000b7c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025e6:	d901      	bls.n	80025ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e007      	b.n	80025fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_PWREx_ConfigSupply+0xb0>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d1ee      	bne.n	80025d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	58024800 	.word	0x58024800

08002608 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	58024800 	.word	0x58024800

08002628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e3ff      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8087 	beq.w	8002756 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002648:	4b99      	ldr	r3, [pc, #612]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002652:	4b97      	ldr	r3, [pc, #604]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	2b10      	cmp	r3, #16
 800265c:	d007      	beq.n	800266e <HAL_RCC_OscConfig+0x46>
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	2b18      	cmp	r3, #24
 8002662:	d110      	bne.n	8002686 <HAL_RCC_OscConfig+0x5e>
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d10b      	bne.n	8002686 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266e:	4b90      	ldr	r3, [pc, #576]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d06c      	beq.n	8002754 <HAL_RCC_OscConfig+0x12c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d168      	bne.n	8002754 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e3d9      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x76>
 8002690:	4b87      	ldr	r3, [pc, #540]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a86      	ldr	r2, [pc, #536]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e02e      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x98>
 80026a6:	4b82      	ldr	r3, [pc, #520]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a81      	ldr	r2, [pc, #516]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b7f      	ldr	r3, [pc, #508]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a7e      	ldr	r2, [pc, #504]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e01d      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0xbc>
 80026ca:	4b79      	ldr	r3, [pc, #484]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a78      	ldr	r2, [pc, #480]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 80026e4:	4b72      	ldr	r3, [pc, #456]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a71      	ldr	r2, [pc, #452]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b6f      	ldr	r3, [pc, #444]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a6e      	ldr	r2, [pc, #440]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fa3a 	bl	8000b7c <HAL_GetTick>
 8002708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fa36 	bl	8000b7c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e38d      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271e:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xe4>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fa26 	bl	8000b7c <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fa22 	bl	8000b7c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e379      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002746:	4b5a      	ldr	r3, [pc, #360]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x10c>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80ae 	beq.w	80028c0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002764:	4b52      	ldr	r3, [pc, #328]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800276c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800276e:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_RCC_OscConfig+0x162>
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	2b18      	cmp	r3, #24
 800277e:	d13a      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1ce>
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d135      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278a:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x17a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e34b      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	f7fe fa19 	bl	8000bd8 <HAL_GetREVID>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d817      	bhi.n	80027e0 <HAL_RCC_OscConfig+0x1b8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b40      	cmp	r3, #64	; 0x40
 80027b6:	d108      	bne.n	80027ca <HAL_RCC_OscConfig+0x1a2>
 80027b8:	4b3d      	ldr	r3, [pc, #244]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027c0:	4a3b      	ldr	r2, [pc, #236]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80027c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c8:	e07a      	b.n	80028c0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	031b      	lsls	r3, r3, #12
 80027d8:	4935      	ldr	r1, [pc, #212]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027de:	e06f      	b.n	80028c0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b33      	ldr	r3, [pc, #204]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	4930      	ldr	r1, [pc, #192]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f4:	e064      	b.n	80028c0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d045      	beq.n	800288a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027fe:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 0219 	bic.w	r2, r3, #25
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	4929      	ldr	r1, [pc, #164]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe f9b4 	bl	8000b7c <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002818:	f7fe f9b0 	bl	8000b7c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e307      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	f7fe f9cf 	bl	8000bd8 <HAL_GetREVID>
 800283a:	4602      	mov	r2, r0
 800283c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002840:	429a      	cmp	r2, r3
 8002842:	d817      	bhi.n	8002874 <HAL_RCC_OscConfig+0x24c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d108      	bne.n	800285e <HAL_RCC_OscConfig+0x236>
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002854:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285a:	6053      	str	r3, [r2, #4]
 800285c:	e030      	b.n	80028c0 <HAL_RCC_OscConfig+0x298>
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	031b      	lsls	r3, r3, #12
 800286c:	4910      	ldr	r1, [pc, #64]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]
 8002872:	e025      	b.n	80028c0 <HAL_RCC_OscConfig+0x298>
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	490b      	ldr	r1, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
 8002888:	e01a      	b.n	80028c0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <HAL_RCC_OscConfig+0x288>)
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe f971 	bl	8000b7c <HAL_GetTick>
 800289a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800289c:	e00a      	b.n	80028b4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289e:	f7fe f96d 	bl	8000b7c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d903      	bls.n	80028b4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e2c4      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
 80028b0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028b4:	4ba4      	ldr	r3, [pc, #656]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ee      	bne.n	800289e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a9 	beq.w	8002a20 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ce:	4b9e      	ldr	r3, [pc, #632]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028d8:	4b9b      	ldr	r3, [pc, #620]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d007      	beq.n	80028f4 <HAL_RCC_OscConfig+0x2cc>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b18      	cmp	r3, #24
 80028e8:	d13a      	bne.n	8002960 <HAL_RCC_OscConfig+0x338>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d135      	bne.n	8002960 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028f4:	4b94      	ldr	r3, [pc, #592]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_OscConfig+0x2e4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d001      	beq.n	800290c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e296      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800290c:	f7fe f964 	bl	8000bd8 <HAL_GetREVID>
 8002910:	4602      	mov	r2, r0
 8002912:	f241 0303 	movw	r3, #4099	; 0x1003
 8002916:	429a      	cmp	r2, r3
 8002918:	d817      	bhi.n	800294a <HAL_RCC_OscConfig+0x322>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	2b20      	cmp	r3, #32
 8002920:	d108      	bne.n	8002934 <HAL_RCC_OscConfig+0x30c>
 8002922:	4b89      	ldr	r3, [pc, #548]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800292a:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 800292c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002930:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002932:	e075      	b.n	8002a20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002934:	4b84      	ldr	r3, [pc, #528]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	069b      	lsls	r3, r3, #26
 8002942:	4981      	ldr	r1, [pc, #516]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002948:	e06a      	b.n	8002a20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800294a:	4b7f      	ldr	r3, [pc, #508]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	497b      	ldr	r1, [pc, #492]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 800295a:	4313      	orrs	r3, r2
 800295c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800295e:	e05f      	b.n	8002a20 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d042      	beq.n	80029ee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002968:	4b77      	ldr	r3, [pc, #476]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a76      	ldr	r2, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 800296e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe f902 	bl	8000b7c <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800297c:	f7fe f8fe 	bl	8000b7c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e255      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800298e:	4b6e      	ldr	r3, [pc, #440]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800299a:	f7fe f91d 	bl	8000bd8 <HAL_GetREVID>
 800299e:	4602      	mov	r2, r0
 80029a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d817      	bhi.n	80029d8 <HAL_RCC_OscConfig+0x3b0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d108      	bne.n	80029c2 <HAL_RCC_OscConfig+0x39a>
 80029b0:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029b8:	4a63      	ldr	r2, [pc, #396]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80029ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029be:	6053      	str	r3, [r2, #4]
 80029c0:	e02e      	b.n	8002a20 <HAL_RCC_OscConfig+0x3f8>
 80029c2:	4b61      	ldr	r3, [pc, #388]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	069b      	lsls	r3, r3, #26
 80029d0:	495d      	ldr	r1, [pc, #372]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
 80029d6:	e023      	b.n	8002a20 <HAL_RCC_OscConfig+0x3f8>
 80029d8:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	4958      	ldr	r1, [pc, #352]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60cb      	str	r3, [r1, #12]
 80029ec:	e018      	b.n	8002a20 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a55      	ldr	r2, [pc, #340]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 80029f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe f8bf 	bl	8000b7c <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a02:	f7fe f8bb 	bl	8000b7c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e212      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a14:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f0      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d036      	beq.n	8002a9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d019      	beq.n	8002a68 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a34:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	4a43      	ldr	r2, [pc, #268]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe f89c 	bl	8000b7c <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe f898 	bl	8000b7c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1ef      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x420>
 8002a66:	e018      	b.n	8002a9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6c:	4a36      	ldr	r2, [pc, #216]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe f882 	bl	8000b7c <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe f87e 	bl	8000b7c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e1d5      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a8e:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d036      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d019      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002aae:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002ab4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aba:	f7fe f85f 	bl	8000b7c <HAL_GetTick>
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ac2:	f7fe f85b 	bl	8000b7c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1b2      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x49a>
 8002ae0:	e018      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aee:	f7fe f845 	bl	8000b7c <HAL_GetTick>
 8002af2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002af6:	f7fe f841 	bl	8000b7c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e198      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_RCC_OscConfig+0x520>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8085 	beq.w	8002c2c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <HAL_RCC_OscConfig+0x524>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_OscConfig+0x524>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b2e:	f7fe f825 	bl	8000b7c <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b34:	e00c      	b.n	8002b50 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7fe f821 	bl	8000b7c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b64      	cmp	r3, #100	; 0x64
 8002b42:	d905      	bls.n	8002b50 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e178      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
 8002b48:	58024400 	.word	0x58024400
 8002b4c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b50:	4b96      	ldr	r3, [pc, #600]	; (8002dac <HAL_RCC_OscConfig+0x784>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ec      	beq.n	8002b36 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x54a>
 8002b64:	4b92      	ldr	r3, [pc, #584]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a91      	ldr	r2, [pc, #580]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	e02d      	b.n	8002bce <HAL_RCC_OscConfig+0x5a6>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x56c>
 8002b7a:	4b8d      	ldr	r3, [pc, #564]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a8c      	ldr	r2, [pc, #560]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	4b8a      	ldr	r3, [pc, #552]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a89      	ldr	r2, [pc, #548]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	e01c      	b.n	8002bce <HAL_RCC_OscConfig+0x5a6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x58e>
 8002b9c:	4b84      	ldr	r3, [pc, #528]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a83      	ldr	r2, [pc, #524]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a80      	ldr	r2, [pc, #512]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb4:	e00b      	b.n	8002bce <HAL_RCC_OscConfig+0x5a6>
 8002bb6:	4b7e      	ldr	r3, [pc, #504]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a7d      	ldr	r2, [pc, #500]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	4b7b      	ldr	r3, [pc, #492]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a7a      	ldr	r2, [pc, #488]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d015      	beq.n	8002c02 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fd ffd1 	bl	8000b7c <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fd ffcd 	bl	8000b7c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e122      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf4:	4b6e      	ldr	r3, [pc, #440]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ee      	beq.n	8002bde <HAL_RCC_OscConfig+0x5b6>
 8002c00:	e014      	b.n	8002c2c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c02:	f7fd ffbb 	bl	8000b7c <HAL_GetTick>
 8002c06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fd ffb7 	bl	8000b7c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e10c      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c20:	4b63      	ldr	r3, [pc, #396]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8101 	beq.w	8002e38 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c36:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c3e:	2b18      	cmp	r3, #24
 8002c40:	f000 80bc 	beq.w	8002dbc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	f040 8095 	bne.w	8002d78 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4e:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a57      	ldr	r2, [pc, #348]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fd ff8f 	bl	8000b7c <HAL_GetTick>
 8002c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c62:	f7fd ff8b 	bl	8000b7c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0e2      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c74:	4b4e      	ldr	r3, [pc, #312]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c80:	4b4b      	ldr	r3, [pc, #300]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c84:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <HAL_RCC_OscConfig+0x78c>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	430a      	orrs	r2, r1
 8002c94:	4946      	ldr	r1, [pc, #280]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	628b      	str	r3, [r1, #40]	; 0x28
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002cca:	4939      	ldr	r1, [pc, #228]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002cd0:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	4a36      	ldr	r2, [pc, #216]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cdc:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce0:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <HAL_RCC_OscConfig+0x790>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ce8:	00d2      	lsls	r2, r2, #3
 8002cea:	4931      	ldr	r1, [pc, #196]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cf0:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	f023 020c 	bic.w	r2, r3, #12
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	492c      	ldr	r1, [pc, #176]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f023 0202 	bic.w	r2, r3, #2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4928      	ldr	r1, [pc, #160]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d14:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d2c:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	4a1f      	ldr	r2, [pc, #124]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d44:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fd ff14 	bl	8000b7c <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fd ff10 	bl	8000b7c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e067      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x730>
 8002d76:	e05f      	b.n	8002e38 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fd fefa 	bl	8000b7c <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fd fef6 	bl	8000b7c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e04d      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <HAL_RCC_OscConfig+0x788>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x764>
 8002daa:	e045      	b.n	8002e38 <HAL_RCC_OscConfig+0x810>
 8002dac:	58024800 	.word	0x58024800
 8002db0:	58024400 	.word	0x58024400
 8002db4:	fffffc0c 	.word	0xfffffc0c
 8002db8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_RCC_OscConfig+0x81c>)
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_RCC_OscConfig+0x81c>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d031      	beq.n	8002e34 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f003 0203 	and.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d12a      	bne.n	8002e34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d122      	bne.n	8002e34 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d11a      	bne.n	8002e34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	0a5b      	lsrs	r3, r3, #9
 8002e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d111      	bne.n	8002e34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	0c1b      	lsrs	r3, r3, #16
 8002e14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d108      	bne.n	8002e34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	0e1b      	lsrs	r3, r3, #24
 8002e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3730      	adds	r7, #48	; 0x30
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	58024400 	.word	0x58024400

08002e48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e19c      	b.n	8003196 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b8a      	ldr	r3, [pc, #552]	; (8003088 <HAL_RCC_ClockConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d910      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b87      	ldr	r3, [pc, #540]	; (8003088 <HAL_RCC_ClockConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 020f 	bic.w	r2, r3, #15
 8002e72:	4985      	ldr	r1, [pc, #532]	; (8003088 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b83      	ldr	r3, [pc, #524]	; (8003088 <HAL_RCC_ClockConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e184      	b.n	8003196 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	4b7b      	ldr	r3, [pc, #492]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d908      	bls.n	8002eba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ea8:	4b78      	ldr	r3, [pc, #480]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	4975      	ldr	r1, [pc, #468]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	4b70      	ldr	r3, [pc, #448]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d908      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ed6:	4b6d      	ldr	r3, [pc, #436]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	496a      	ldr	r1, [pc, #424]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	4b64      	ldr	r3, [pc, #400]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d908      	bls.n	8002f16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f04:	4b61      	ldr	r3, [pc, #388]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	495e      	ldr	r1, [pc, #376]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d010      	beq.n	8002f44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d908      	bls.n	8002f44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f32:	4b56      	ldr	r3, [pc, #344]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	4953      	ldr	r1, [pc, #332]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d010      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	4b4d      	ldr	r3, [pc, #308]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d908      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f60:	4b4a      	ldr	r3, [pc, #296]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f023 020f 	bic.w	r2, r3, #15
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4947      	ldr	r1, [pc, #284]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d055      	beq.n	800302a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f7e:	4b43      	ldr	r3, [pc, #268]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	4940      	ldr	r1, [pc, #256]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f98:	4b3c      	ldr	r3, [pc, #240]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d121      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0f6      	b.n	8003196 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d107      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fb0:	4b36      	ldr	r3, [pc, #216]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d115      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0ea      	b.n	8003196 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fc8:	4b30      	ldr	r3, [pc, #192]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0de      	b.n	8003196 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0d6      	b.n	8003196 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f023 0207 	bic.w	r2, r3, #7
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4925      	ldr	r1, [pc, #148]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7fd fdbf 	bl	8000b7c <HAL_GetTick>
 8002ffe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003000:	e00a      	b.n	8003018 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003002:	f7fd fdbb 	bl	8000b7c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0be      	b.n	8003196 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003018:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	429a      	cmp	r2, r3
 8003028:	d1eb      	bne.n	8003002 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d010      	beq.n	8003058 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	429a      	cmp	r2, r3
 8003044:	d208      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f023 020f 	bic.w	r2, r3, #15
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	490e      	ldr	r1, [pc, #56]	; (800308c <HAL_RCC_ClockConfig+0x244>)
 8003054:	4313      	orrs	r3, r2
 8003056:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_ClockConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d214      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_RCC_ClockConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	4906      	ldr	r1, [pc, #24]	; (8003088 <HAL_RCC_ClockConfig+0x240>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <HAL_RCC_ClockConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d005      	beq.n	8003090 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e086      	b.n	8003196 <HAL_RCC_ClockConfig+0x34e>
 8003088:	52002000 	.word	0x52002000
 800308c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d208      	bcs.n	80030be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030ac:	4b3c      	ldr	r3, [pc, #240]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	4939      	ldr	r1, [pc, #228]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d208      	bcs.n	80030ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030da:	4b31      	ldr	r3, [pc, #196]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	492e      	ldr	r1, [pc, #184]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003104:	429a      	cmp	r2, r3
 8003106:	d208      	bcs.n	800311a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	4922      	ldr	r1, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 8003116:	4313      	orrs	r3, r2
 8003118:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d010      	beq.n	8003148 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003132:	429a      	cmp	r2, r3
 8003134:	d208      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4917      	ldr	r1, [pc, #92]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 8003144:	4313      	orrs	r3, r2
 8003146:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003148:	f000 f834 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 800314c:	4601      	mov	r1, r0
 800314e:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	0a1b      	lsrs	r3, r3, #8
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <HAL_RCC_ClockConfig+0x35c>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	fa21 f303 	lsr.w	r3, r1, r3
 8003164:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_RCC_ClockConfig+0x358>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <HAL_RCC_ClockConfig+0x35c>)
 8003170:	5cd3      	ldrb	r3, [r2, r3]
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x360>)
 800317e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <HAL_RCC_ClockConfig+0x364>)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_RCC_ClockConfig+0x368>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fcac 	bl	8000ae8 <HAL_InitTick>
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	58024400 	.word	0x58024400
 80031a4:	08007bd0 	.word	0x08007bd0
 80031a8:	20000004 	.word	0x20000004
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000008 	.word	0x20000008

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ba:	4baf      	ldr	r3, [pc, #700]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031c2:	2b18      	cmp	r3, #24
 80031c4:	f200 814e 	bhi.w	8003464 <HAL_RCC_GetSysClockFreq+0x2b0>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	08003235 	.word	0x08003235
 80031d4:	08003465 	.word	0x08003465
 80031d8:	08003465 	.word	0x08003465
 80031dc:	08003465 	.word	0x08003465
 80031e0:	08003465 	.word	0x08003465
 80031e4:	08003465 	.word	0x08003465
 80031e8:	08003465 	.word	0x08003465
 80031ec:	08003465 	.word	0x08003465
 80031f0:	0800325b 	.word	0x0800325b
 80031f4:	08003465 	.word	0x08003465
 80031f8:	08003465 	.word	0x08003465
 80031fc:	08003465 	.word	0x08003465
 8003200:	08003465 	.word	0x08003465
 8003204:	08003465 	.word	0x08003465
 8003208:	08003465 	.word	0x08003465
 800320c:	08003465 	.word	0x08003465
 8003210:	08003261 	.word	0x08003261
 8003214:	08003465 	.word	0x08003465
 8003218:	08003465 	.word	0x08003465
 800321c:	08003465 	.word	0x08003465
 8003220:	08003465 	.word	0x08003465
 8003224:	08003465 	.word	0x08003465
 8003228:	08003465 	.word	0x08003465
 800322c:	08003465 	.word	0x08003465
 8003230:	08003267 	.word	0x08003267
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003234:	4b90      	ldr	r3, [pc, #576]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003240:	4b8d      	ldr	r3, [pc, #564]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	08db      	lsrs	r3, r3, #3
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	4a8c      	ldr	r2, [pc, #560]	; (800347c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
 8003250:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003252:	e10a      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003254:	4b89      	ldr	r3, [pc, #548]	; (800347c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003256:	61bb      	str	r3, [r7, #24]
    break;
 8003258:	e107      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800325a:	4b89      	ldr	r3, [pc, #548]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800325c:	61bb      	str	r3, [r7, #24]
    break;
 800325e:	e104      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003260:	4b88      	ldr	r3, [pc, #544]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003262:	61bb      	str	r3, [r7, #24]
    break;
 8003264:	e101      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003266:	4b84      	ldr	r3, [pc, #528]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003270:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800327a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800327c:	4b7e      	ldr	r3, [pc, #504]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003286:	4b7c      	ldr	r3, [pc, #496]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	08db      	lsrs	r3, r3, #3
 800328c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80da 	beq.w	800345e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d05a      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x1b2>
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d302      	bcc.n	80032ba <HAL_RCC_GetSysClockFreq+0x106>
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d078      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x1f6>
 80032b8:	e099      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032ba:	4b6f      	ldr	r3, [pc, #444]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02d      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032c6:	4b6c      	ldr	r3, [pc, #432]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	08db      	lsrs	r3, r3, #3
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	4a6a      	ldr	r2, [pc, #424]	; (800347c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f0:	4b61      	ldr	r3, [pc, #388]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003300:	ed97 6a02 	vldr	s12, [r7, #8]
 8003304:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003488 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800330c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003320:	e087      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	ee07 3a90 	vmov	s15, r3
 8003328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800348c <HAL_RCC_GetSysClockFreq+0x2d8>
 8003330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003334:	4b50      	ldr	r3, [pc, #320]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003344:	ed97 6a02 	vldr	s12, [r7, #8]
 8003348:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003488 <HAL_RCC_GetSysClockFreq+0x2d4>
 800334c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800335c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003360:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003364:	e065      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	ee07 3a90 	vmov	s15, r3
 800336c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003370:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003490 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003378:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003380:	ee07 3a90 	vmov	s15, r3
 8003384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003388:	ed97 6a02 	vldr	s12, [r7, #8]
 800338c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003488 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800339c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033a8:	e043      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	ee07 3a90 	vmov	s15, r3
 80033b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003494 <HAL_RCC_GetSysClockFreq+0x2e0>
 80033b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033bc:	4b2e      	ldr	r3, [pc, #184]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80033d0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003488 <HAL_RCC_GetSysClockFreq+0x2d4>
 80033d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033ec:	e021      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003490 <HAL_RCC_GetSysClockFreq+0x2dc>
 80033fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003410:	ed97 6a02 	vldr	s12, [r7, #8]
 8003414:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003488 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003418:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800341c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003424:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003430:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	0a5b      	lsrs	r3, r3, #9
 8003438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800343c:	3301      	adds	r3, #1
 800343e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800344a:	edd7 6a07 	vldr	s13, [r7, #28]
 800344e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003456:	ee17 3a90 	vmov	r3, s15
 800345a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800345c:	e005      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
    break;
 8003462:	e002      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003466:	61bb      	str	r3, [r7, #24]
    break;
 8003468:	bf00      	nop
  }

  return sysclockfreq;
 800346a:	69bb      	ldr	r3, [r7, #24]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3724      	adds	r7, #36	; 0x24
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	58024400 	.word	0x58024400
 800347c:	03d09000 	.word	0x03d09000
 8003480:	003d0900 	.word	0x003d0900
 8003484:	017d7840 	.word	0x017d7840
 8003488:	46000000 	.word	0x46000000
 800348c:	4c742400 	.word	0x4c742400
 8003490:	4a742400 	.word	0x4a742400
 8003494:	4bbebc20 	.word	0x4bbebc20

08003498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800349e:	f7ff fe89 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 80034a2:	4601      	mov	r1, r0
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <HAL_RCC_GetHCLKFreq+0x54>)
 80034b0:	5cd3      	ldrb	r3, [r2, r3]
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	fa21 f303 	lsr.w	r3, r1, r3
 80034ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_GetHCLKFreq+0x54>)
 80034c6:	5cd3      	ldrb	r3, [r2, r3]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80034d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034d6:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	58024400 	.word	0x58024400
 80034ec:	08007bd0 	.word	0x08007bd0
 80034f0:	20000004 	.word	0x20000004
 80034f4:	20000000 	.word	0x20000000

080034f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003500:	2300      	movs	r3, #0
 8003502:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003504:	2300      	movs	r3, #0
 8003506:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03d      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351c:	d013      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800351e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003522:	d802      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003528:	e01f      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800352a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800352e:	d013      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003530:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003534:	d01c      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003536:	e018      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003538:	4baf      	ldr	r3, [pc, #700]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	4aae      	ldr	r2, [pc, #696]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800353e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003542:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003544:	e015      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3304      	adds	r3, #4
 800354a:	2102      	movs	r1, #2
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fec1 	bl	80042d4 <RCCEx_PLL2_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003556:	e00c      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3324      	adds	r3, #36	; 0x24
 800355c:	2102      	movs	r1, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f000 ff6a 	bl	8004438 <RCCEx_PLL3_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003568:	e003      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
      break;
 800356e:	e000      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003578:	4b9f      	ldr	r3, [pc, #636]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800357a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003584:	499c      	ldr	r1, [pc, #624]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003586:	4313      	orrs	r3, r2
 8003588:	650b      	str	r3, [r1, #80]	; 0x50
 800358a:	e001      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d03d      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d826      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035c1 	.word	0x080035c1
 80035b0:	080035cf 	.word	0x080035cf
 80035b4:	080035e1 	.word	0x080035e1
 80035b8:	080035f9 	.word	0x080035f9
 80035bc:	080035f9 	.word	0x080035f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c0:	4b8d      	ldr	r3, [pc, #564]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	4a8c      	ldr	r2, [pc, #560]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035cc:	e015      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fe7d 	bl	80042d4 <RCCEx_PLL2_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035de:	e00c      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3324      	adds	r3, #36	; 0x24
 80035e4:	2100      	movs	r1, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 ff26 	bl	8004438 <RCCEx_PLL3_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035f0:	e003      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
      break;
 80035f6:	e000      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80035f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003600:	4b7d      	ldr	r3, [pc, #500]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003604:	f023 0207 	bic.w	r2, r3, #7
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	497a      	ldr	r1, [pc, #488]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800360e:	4313      	orrs	r3, r2
 8003610:	650b      	str	r3, [r1, #80]	; 0x50
 8003612:	e001      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003620:	2b00      	cmp	r3, #0
 8003622:	d03e      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d01c      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800362c:	2b80      	cmp	r3, #128	; 0x80
 800362e:	d804      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d00d      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003638:	e01e      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800363a:	2bc0      	cmp	r3, #192	; 0xc0
 800363c:	d01f      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800363e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003642:	d01e      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003644:	e018      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003646:	4b6c      	ldr	r3, [pc, #432]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	4a6b      	ldr	r2, [pc, #428]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800364c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003652:	e017      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fe3a 	bl	80042d4 <RCCEx_PLL2_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003664:	e00e      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3324      	adds	r3, #36	; 0x24
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fee3 	bl	8004438 <RCCEx_PLL3_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003676:	e005      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	75fb      	strb	r3, [r7, #23]
      break;
 800367c:	e002      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800368a:	4b5b      	ldr	r3, [pc, #364]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800368c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	4958      	ldr	r1, [pc, #352]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003698:	4313      	orrs	r3, r2
 800369a:	650b      	str	r3, [r1, #80]	; 0x50
 800369c:	e001      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369e:	7dfb      	ldrb	r3, [r7, #23]
 80036a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d044      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b8:	d01f      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036be:	d805      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c8:	d00e      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80036ca:	e01f      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80036cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036d0:	d01f      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80036d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d6:	d01e      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80036d8:	e018      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	4a46      	ldr	r2, [pc, #280]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e6:	e017      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fdf0 	bl	80042d4 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036f8:	e00e      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3324      	adds	r3, #36	; 0x24
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fe99 	bl	8004438 <RCCEx_PLL3_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800370a:	e005      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	75fb      	strb	r3, [r7, #23]
      break;
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800372c:	4932      	ldr	r1, [pc, #200]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800372e:	4313      	orrs	r3, r2
 8003730:	658b      	str	r3, [r1, #88]	; 0x58
 8003732:	e001      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003740:	2b00      	cmp	r3, #0
 8003742:	d044      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800374a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800374e:	d01f      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003754:	d805      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800375a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800375e:	d00e      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003760:	e01f      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003762:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003766:	d01f      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800376c:	d01e      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800376e:	e018      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003770:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800377c:	e017      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fda5 	bl	80042d4 <RCCEx_PLL2_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800378e:	e00e      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3324      	adds	r3, #36	; 0x24
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fe4e 	bl	8004438 <RCCEx_PLL3_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037a0:	e005      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
      break;
 80037a6:	e002      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80037a8:	bf00      	nop
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80037ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037c2:	490d      	ldr	r1, [pc, #52]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	658b      	str	r3, [r1, #88]	; 0x58
 80037c8:	e001      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d035      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d00c      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x304>
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d802      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01b      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80037ea:	e017      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d00c      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x312>
 80037f0:	2b30      	cmp	r3, #48	; 0x30
 80037f2:	d018      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80037f4:	e012      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80037f6:	bf00      	nop
 80037f8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fc:	4baf      	ldr	r3, [pc, #700]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	4aae      	ldr	r2, [pc, #696]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003806:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003808:	e00e      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	2102      	movs	r1, #2
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fd5f 	bl	80042d4 <RCCEx_PLL2_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800381a:	e005      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	75fb      	strb	r3, [r7, #23]
      break;
 8003820:	e002      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800382e:	4ba3      	ldr	r3, [pc, #652]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003832:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383a:	49a0      	ldr	r1, [pc, #640]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800383c:	4313      	orrs	r3, r2
 800383e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003840:	e001      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d042      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385a:	d01f      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800385c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003860:	d805      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386a:	d00e      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800386c:	e01f      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800386e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003872:	d01f      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003878:	d01e      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800387a:	e018      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387c:	4b8f      	ldr	r3, [pc, #572]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4a8e      	ldr	r2, [pc, #568]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003888:	e017      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fd1f 	bl	80042d4 <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800389a:	e00e      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fdc8 	bl	8004438 <RCCEx_PLL3_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038ac:	e005      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
      break;
 80038b2:	e002      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80038b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038c0:	4b7e      	ldr	r3, [pc, #504]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	497b      	ldr	r1, [pc, #492]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	650b      	str	r3, [r1, #80]	; 0x50
 80038d2:	e001      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d042      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ec:	d01b      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80038ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f2:	d805      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d022      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80038fe:	e01b      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003900:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003904:	d01d      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800390a:	d01c      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800390c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003910:	d01b      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003912:	e011      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	2101      	movs	r1, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fcda 	bl	80042d4 <RCCEx_PLL2_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003924:	e012      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3324      	adds	r3, #36	; 0x24
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fd83 	bl	8004438 <RCCEx_PLL3_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003936:	e009      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	75fb      	strb	r3, [r7, #23]
      break;
 800393c:	e006      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800393e:	bf00      	nop
 8003940:	e004      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003942:	bf00      	nop
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800394a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003952:	4b5a      	ldr	r3, [pc, #360]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395e:	4957      	ldr	r1, [pc, #348]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	650b      	str	r3, [r1, #80]	; 0x50
 8003964:	e001      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d044      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800397c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003980:	d01b      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003986:	d805      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d022      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800398c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003992:	e01b      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d01d      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800399a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800399e:	d01c      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80039a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039a4:	d01b      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80039a6:	e011      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fc90 	bl	80042d4 <RCCEx_PLL2_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039b8:	e012      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3324      	adds	r3, #36	; 0x24
 80039be:	2101      	movs	r1, #1
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fd39 	bl	8004438 <RCCEx_PLL3_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039ca:	e009      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
      break;
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80039d2:	bf00      	nop
 80039d4:	e004      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80039de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039e6:	4b35      	ldr	r3, [pc, #212]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039f4:	4931      	ldr	r1, [pc, #196]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	658b      	str	r3, [r1, #88]	; 0x58
 80039fa:	e001      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d02d      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a14:	d005      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a1a:	d009      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a20:	e00f      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	4a25      	ldr	r2, [pc, #148]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a2e:	e00c      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	2101      	movs	r1, #1
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fc4c 	bl	80042d4 <RCCEx_PLL2_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a40:	e003      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	75fb      	strb	r3, [r7, #23]
      break;
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5c:	4917      	ldr	r1, [pc, #92]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	650b      	str	r3, [r1, #80]	; 0x50
 8003a62:	e001      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d035      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d81b      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003ac1 	.word	0x08003ac1
 8003a88:	08003a95 	.word	0x08003a95
 8003a8c:	08003aa3 	.word	0x08003aa3
 8003a90:	08003ac1 	.word	0x08003ac1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	4a08      	ldr	r2, [pc, #32]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003aa0:	e00f      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fc13 	bl	80042d4 <RCCEx_PLL2_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ab2:	e006      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab8:	e003      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003aba:	bf00      	nop
 8003abc:	58024400 	.word	0x58024400
      break;
 8003ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ac8:	4bba      	ldr	r3, [pc, #744]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003acc:	f023 0203 	bic.w	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	49b7      	ldr	r1, [pc, #732]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ada:	e001      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8086 	beq.w	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aee:	4bb2      	ldr	r3, [pc, #712]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4ab1      	ldr	r2, [pc, #708]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003afa:	f7fd f83f 	bl	8000b7c <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b00:	e009      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b02:	f7fd f83b 	bl	8000b7c <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b64      	cmp	r3, #100	; 0x64
 8003b0e:	d902      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	75fb      	strb	r3, [r7, #23]
        break;
 8003b14:	e005      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b16:	4ba8      	ldr	r3, [pc, #672]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0ef      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d166      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b28:	4ba2      	ldr	r3, [pc, #648]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b32:	4053      	eors	r3, r2
 8003b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b3c:	4b9d      	ldr	r3, [pc, #628]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b46:	4b9b      	ldr	r3, [pc, #620]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a9a      	ldr	r2, [pc, #616]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b52:	4b98      	ldr	r3, [pc, #608]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	4a97      	ldr	r2, [pc, #604]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b5e:	4a95      	ldr	r2, [pc, #596]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6e:	d115      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd f804 	bl	8000b7c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b76:	e00b      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fd f800 	bl	8000b7c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d902      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	75fb      	strb	r3, [r7, #23]
            break;
 8003b8e:	e005      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b90:	4b88      	ldr	r3, [pc, #544]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ed      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d126      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb0:	d10d      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003bb2:	4b80      	ldr	r3, [pc, #512]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bc0:	0919      	lsrs	r1, r3, #4
 8003bc2:	4b7e      	ldr	r3, [pc, #504]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	497b      	ldr	r1, [pc, #492]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	610b      	str	r3, [r1, #16]
 8003bcc:	e005      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003bce:	4b79      	ldr	r3, [pc, #484]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	4a78      	ldr	r2, [pc, #480]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bd8:	6113      	str	r3, [r2, #16]
 8003bda:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	4972      	ldr	r1, [pc, #456]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	670b      	str	r3, [r1, #112]	; 0x70
 8003bee:	e004      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	75bb      	strb	r3, [r7, #22]
 8003bf4:	e001      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d07d      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	2b28      	cmp	r3, #40	; 0x28
 8003c0c:	d866      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003ce3 	.word	0x08003ce3
 8003c18:	08003cdd 	.word	0x08003cdd
 8003c1c:	08003cdd 	.word	0x08003cdd
 8003c20:	08003cdd 	.word	0x08003cdd
 8003c24:	08003cdd 	.word	0x08003cdd
 8003c28:	08003cdd 	.word	0x08003cdd
 8003c2c:	08003cdd 	.word	0x08003cdd
 8003c30:	08003cdd 	.word	0x08003cdd
 8003c34:	08003cb9 	.word	0x08003cb9
 8003c38:	08003cdd 	.word	0x08003cdd
 8003c3c:	08003cdd 	.word	0x08003cdd
 8003c40:	08003cdd 	.word	0x08003cdd
 8003c44:	08003cdd 	.word	0x08003cdd
 8003c48:	08003cdd 	.word	0x08003cdd
 8003c4c:	08003cdd 	.word	0x08003cdd
 8003c50:	08003cdd 	.word	0x08003cdd
 8003c54:	08003ccb 	.word	0x08003ccb
 8003c58:	08003cdd 	.word	0x08003cdd
 8003c5c:	08003cdd 	.word	0x08003cdd
 8003c60:	08003cdd 	.word	0x08003cdd
 8003c64:	08003cdd 	.word	0x08003cdd
 8003c68:	08003cdd 	.word	0x08003cdd
 8003c6c:	08003cdd 	.word	0x08003cdd
 8003c70:	08003cdd 	.word	0x08003cdd
 8003c74:	08003ce3 	.word	0x08003ce3
 8003c78:	08003cdd 	.word	0x08003cdd
 8003c7c:	08003cdd 	.word	0x08003cdd
 8003c80:	08003cdd 	.word	0x08003cdd
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cdd 	.word	0x08003cdd
 8003c8c:	08003cdd 	.word	0x08003cdd
 8003c90:	08003cdd 	.word	0x08003cdd
 8003c94:	08003ce3 	.word	0x08003ce3
 8003c98:	08003cdd 	.word	0x08003cdd
 8003c9c:	08003cdd 	.word	0x08003cdd
 8003ca0:	08003cdd 	.word	0x08003cdd
 8003ca4:	08003cdd 	.word	0x08003cdd
 8003ca8:	08003cdd 	.word	0x08003cdd
 8003cac:	08003cdd 	.word	0x08003cdd
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003ce3 	.word	0x08003ce3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fb08 	bl	80042d4 <RCCEx_PLL2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cc8:	e00c      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3324      	adds	r3, #36	; 0x24
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fbb1 	bl	8004438 <RCCEx_PLL3_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cda:	e003      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cea:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf6:	492f      	ldr	r1, [pc, #188]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	654b      	str	r3, [r1, #84]	; 0x54
 8003cfc:	e001      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d037      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d12:	2b05      	cmp	r3, #5
 8003d14:	d820      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003d16:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d5f 	.word	0x08003d5f
 8003d20:	08003d35 	.word	0x08003d35
 8003d24:	08003d47 	.word	0x08003d47
 8003d28:	08003d5f 	.word	0x08003d5f
 8003d2c:	08003d5f 	.word	0x08003d5f
 8003d30:	08003d5f 	.word	0x08003d5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 faca 	bl	80042d4 <RCCEx_PLL2_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d44:	e00c      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3324      	adds	r3, #36	; 0x24
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fb73 	bl	8004438 <RCCEx_PLL3_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d56:	e003      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	f023 0207 	bic.w	r2, r3, #7
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d72:	4910      	ldr	r1, [pc, #64]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	654b      	str	r3, [r1, #84]	; 0x54
 8003d78:	e001      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d040      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	2b05      	cmp	r3, #5
 8003d92:	d827      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003deb 	.word	0x08003deb
 8003da0:	08003dc1 	.word	0x08003dc1
 8003da4:	08003dd3 	.word	0x08003dd3
 8003da8:	08003deb 	.word	0x08003deb
 8003dac:	08003deb 	.word	0x08003deb
 8003db0:	08003deb 	.word	0x08003deb
 8003db4:	58024400 	.word	0x58024400
 8003db8:	58024800 	.word	0x58024800
 8003dbc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fa84 	bl	80042d4 <RCCEx_PLL2_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003dd0:	e00c      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3324      	adds	r3, #36	; 0x24
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fb2d 	bl	8004438 <RCCEx_PLL3_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003de2:	e003      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	75fb      	strb	r3, [r7, #23]
      break;
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003df2:	4bb2      	ldr	r3, [pc, #712]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	f023 0207 	bic.w	r2, r3, #7
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	49ae      	ldr	r1, [pc, #696]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	658b      	str	r3, [r1, #88]	; 0x58
 8003e06:	e001      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d044      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e22:	d01b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e28:	d805      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d022      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003e34:	e01b      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3a:	d01d      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e40:	d01c      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003e42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e46:	d01b      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003e48:	e011      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fa3f 	bl	80042d4 <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e5a:	e012      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3324      	adds	r3, #36	; 0x24
 8003e60:	2102      	movs	r1, #2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fae8 	bl	8004438 <RCCEx_PLL3_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e6c:	e009      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
      break;
 8003e72:	e006      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003e74:	bf00      	nop
 8003e76:	e004      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003e78:	bf00      	nop
 8003e7a:	e002      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e88:	4b8c      	ldr	r3, [pc, #560]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e96:	4989      	ldr	r1, [pc, #548]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	654b      	str	r3, [r1, #84]	; 0x54
 8003e9c:	e001      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d044      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb8:	d01b      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ebe:	d805      	bhi.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d022      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003eca:	e01b      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed0:	d01d      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003ed2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ed6:	d01c      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003edc:	d01b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003ede:	e011      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f9f4 	bl	80042d4 <RCCEx_PLL2_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ef0:	e012      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3324      	adds	r3, #36	; 0x24
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fa9d 	bl	8004438 <RCCEx_PLL3_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f02:	e009      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
      break;
 8003f08:	e006      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e004      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003f0e:	bf00      	nop
 8003f10:	e002      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003f12:	bf00      	nop
 8003f14:	e000      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f1e:	4b67      	ldr	r3, [pc, #412]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f2c:	4963      	ldr	r1, [pc, #396]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	658b      	str	r3, [r1, #88]	; 0x58
 8003f32:	e001      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d044      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f4e:	d01b      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f54:	d805      	bhi.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d022      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f60:	e01b      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f66:	d01d      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003f68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f6c:	d01c      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003f6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f72:	d01b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003f74:	e011      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f9a9 	bl	80042d4 <RCCEx_PLL2_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f86:	e012      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3324      	adds	r3, #36	; 0x24
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fa52 	bl	8004438 <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f98:	e009      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f9e:	e006      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003fa0:	bf00      	nop
 8003fa2:	e004      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003fa4:	bf00      	nop
 8003fa6:	e002      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003fa8:	bf00      	nop
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fb4:	4b41      	ldr	r3, [pc, #260]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fc2:	493e      	ldr	r1, [pc, #248]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	658b      	str	r3, [r1, #88]	; 0x58
 8003fc8:	e001      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe4:	d10a      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3324      	adds	r3, #36	; 0x24
 8003fea:	2102      	movs	r1, #2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fa23 	bl	8004438 <RCCEx_PLL3_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ffc:	4b2f      	ldr	r3, [pc, #188]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400a:	492c      	ldr	r1, [pc, #176]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800400c:	4313      	orrs	r3, r2
 800400e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004026:	d10a      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3324      	adds	r3, #36	; 0x24
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fa02 	bl	8004438 <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800403e:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404c:	491b      	ldr	r1, [pc, #108]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d032      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004068:	d00d      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800406a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406e:	d016      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d111      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	2100      	movs	r1, #0
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f92a 	bl	80042d4 <RCCEx_PLL2_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004084:	e00c      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3324      	adds	r3, #36	; 0x24
 800408a:	2102      	movs	r1, #2
 800408c:	4618      	mov	r0, r3
 800408e:	f000 f9d3 	bl	8004438 <RCCEx_PLL3_Config>
 8004092:	4603      	mov	r3, r0
 8004094:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004096:	e003      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	75fb      	strb	r3, [r7, #23]
      break;
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800409e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040b4:	4901      	ldr	r1, [pc, #4]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	658b      	str	r3, [r1, #88]	; 0x58
 80040ba:	e003      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80040bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d02f      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040da:	d00c      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040e0:	d015      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e6:	d10f      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e8:	4b79      	ldr	r3, [pc, #484]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	4a78      	ldr	r2, [pc, #480]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80040ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80040f4:	e00c      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3324      	adds	r3, #36	; 0x24
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f99b 	bl	8004438 <RCCEx_PLL3_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]
      break;
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800410e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004116:	4b6e      	ldr	r3, [pc, #440]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004124:	496a      	ldr	r1, [pc, #424]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004126:	4313      	orrs	r3, r2
 8004128:	654b      	str	r3, [r1, #84]	; 0x54
 800412a:	e001      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d029      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004148:	d007      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800414a:	e00f      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414c:	4b60      	ldr	r3, [pc, #384]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	4a5f      	ldr	r2, [pc, #380]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004158:	e00b      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f8b7 	bl	80042d4 <RCCEx_PLL2_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800416a:	e002      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	75fb      	strb	r3, [r7, #23]
      break;
 8004170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004178:	4b55      	ldr	r3, [pc, #340]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004184:	4952      	ldr	r1, [pc, #328]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004186:	4313      	orrs	r3, r2
 8004188:	64cb      	str	r3, [r1, #76]	; 0x4c
 800418a:	e001      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3324      	adds	r3, #36	; 0x24
 80041a0:	2102      	movs	r1, #2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f948 	bl	8004438 <RCCEx_PLL3_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02f      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c6:	d00c      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041cc:	d802      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d011      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80041d2:	e00d      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d00f      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80041da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041de:	d00e      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80041e0:	e006      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e2:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	4a3a      	ldr	r2, [pc, #232]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80041ee:	e007      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	75fb      	strb	r3, [r7, #23]
      break;
 80041f4:	e004      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80041f6:	bf00      	nop
 80041f8:	e002      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80041fa:	bf00      	nop
 80041fc:	e000      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80041fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004206:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004212:	492f      	ldr	r1, [pc, #188]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004214:	4313      	orrs	r3, r2
 8004216:	654b      	str	r3, [r1, #84]	; 0x54
 8004218:	e001      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800422a:	4b29      	ldr	r3, [pc, #164]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4926      	ldr	r1, [pc, #152]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004238:	4313      	orrs	r3, r2
 800423a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004248:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004256:	491e      	ldr	r1, [pc, #120]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004258:	4313      	orrs	r3, r2
 800425a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004268:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800426a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004274:	4916      	ldr	r1, [pc, #88]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800428c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004290:	6113      	str	r3, [r2, #16]
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800429c:	490c      	ldr	r1, [pc, #48]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	da08      	bge.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	4906      	ldr	r1, [pc, #24]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80042bc:	7dbb      	ldrb	r3, [r7, #22]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	58024400 	.word	0x58024400

080042d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042e2:	4b53      	ldr	r3, [pc, #332]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d101      	bne.n	80042f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e099      	b.n	8004426 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042f2:	4b4f      	ldr	r3, [pc, #316]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4e      	ldr	r2, [pc, #312]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80042f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fe:	f7fc fc3d 	bl	8000b7c <HAL_GetTick>
 8004302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004304:	e008      	b.n	8004318 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004306:	f7fc fc39 	bl	8000b7c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e086      	b.n	8004426 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004318:	4b45      	ldr	r3, [pc, #276]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004324:	4b42      	ldr	r3, [pc, #264]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	493f      	ldr	r1, [pc, #252]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004334:	4313      	orrs	r3, r2
 8004336:	628b      	str	r3, [r1, #40]	; 0x28
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	3b01      	subs	r3, #1
 800433e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	3b01      	subs	r3, #1
 8004348:	025b      	lsls	r3, r3, #9
 800434a:	b29b      	uxth	r3, r3
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	3b01      	subs	r3, #1
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	3b01      	subs	r3, #1
 8004362:	061b      	lsls	r3, r3, #24
 8004364:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004368:	4931      	ldr	r1, [pc, #196]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 800436a:	4313      	orrs	r3, r2
 800436c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800436e:	4b30      	ldr	r3, [pc, #192]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	492d      	ldr	r1, [pc, #180]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 800437c:	4313      	orrs	r3, r2
 800437e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004380:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	f023 0220 	bic.w	r2, r3, #32
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	4928      	ldr	r1, [pc, #160]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 800438e:	4313      	orrs	r3, r2
 8004390:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004392:	4b27      	ldr	r3, [pc, #156]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	4a26      	ldr	r2, [pc, #152]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004398:	f023 0310 	bic.w	r3, r3, #16
 800439c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a2:	4b24      	ldr	r3, [pc, #144]	; (8004434 <RCCEx_PLL2_Config+0x160>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	69d2      	ldr	r2, [r2, #28]
 80043aa:	00d2      	lsls	r2, r2, #3
 80043ac:	4920      	ldr	r1, [pc, #128]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80043b2:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043b8:	f043 0310 	orr.w	r3, r3, #16
 80043bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d106      	bne.n	80043d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043c4:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043d0:	e00f      	b.n	80043f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d106      	bne.n	80043e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043d8:	4b15      	ldr	r3, [pc, #84]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	4a14      	ldr	r2, [pc, #80]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043e4:	e005      	b.n	80043f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	4a11      	ldr	r2, [pc, #68]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043f2:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a0e      	ldr	r2, [pc, #56]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fe:	f7fc fbbd 	bl	8000b7c <HAL_GetTick>
 8004402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004404:	e008      	b.n	8004418 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004406:	f7fc fbb9 	bl	8000b7c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e006      	b.n	8004426 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <RCCEx_PLL2_Config+0x15c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	58024400 	.word	0x58024400
 8004434:	ffff0007 	.word	0xffff0007

08004438 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004446:	4b53      	ldr	r3, [pc, #332]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b03      	cmp	r3, #3
 8004450:	d101      	bne.n	8004456 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e099      	b.n	800458a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004456:	4b4f      	ldr	r3, [pc, #316]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a4e      	ldr	r2, [pc, #312]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 800445c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004462:	f7fc fb8b 	bl	8000b7c <HAL_GetTick>
 8004466:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004468:	e008      	b.n	800447c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800446a:	f7fc fb87 	bl	8000b7c <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e086      	b.n	800458a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800447c:	4b45      	ldr	r3, [pc, #276]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004488:	4b42      	ldr	r3, [pc, #264]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	051b      	lsls	r3, r3, #20
 8004496:	493f      	ldr	r1, [pc, #252]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	628b      	str	r3, [r1, #40]	; 0x28
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	025b      	lsls	r3, r3, #9
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	061b      	lsls	r3, r3, #24
 80044c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044cc:	4931      	ldr	r1, [pc, #196]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044d2:	4b30      	ldr	r3, [pc, #192]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	492d      	ldr	r1, [pc, #180]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044e4:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	4928      	ldr	r1, [pc, #160]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044f6:	4b27      	ldr	r3, [pc, #156]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	4a26      	ldr	r2, [pc, #152]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004500:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004502:	4b24      	ldr	r3, [pc, #144]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004506:	4b24      	ldr	r3, [pc, #144]	; (8004598 <RCCEx_PLL3_Config+0x160>)
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	69d2      	ldr	r2, [r2, #28]
 800450e:	00d2      	lsls	r2, r2, #3
 8004510:	4920      	ldr	r1, [pc, #128]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004516:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	4a1e      	ldr	r2, [pc, #120]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004528:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	4a19      	ldr	r2, [pc, #100]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 800452e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004532:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004534:	e00f      	b.n	8004556 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d106      	bne.n	800454a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800453c:	4b15      	ldr	r3, [pc, #84]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	4a14      	ldr	r2, [pc, #80]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004542:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004546:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004548:	e005      	b.n	8004556 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	4a11      	ldr	r2, [pc, #68]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004554:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 800455c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004562:	f7fc fb0b 	bl	8000b7c <HAL_GetTick>
 8004566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004568:	e008      	b.n	800457c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800456a:	f7fc fb07 	bl	8000b7c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e006      	b.n	800458a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <RCCEx_PLL3_Config+0x15c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	58024400 	.word	0x58024400
 8004598:	ffff0007 	.word	0xffff0007

0800459c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800459c:	b084      	sub	sp, #16
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	f107 001c 	add.w	r0, r7, #28
 80045aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d120      	bne.n	80045f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	4b25      	ldr	r3, [pc, #148]	; (800465c <USB_CoreInit+0xc0>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d105      	bne.n	80045ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f001 fabe 	bl	8005b6c <USB_CoreReset>
 80045f0:	4603      	mov	r3, r0
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	e01a      	b.n	800462c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f001 fab2 	bl	8005b6c <USB_CoreReset>
 8004608:	4603      	mov	r3, r0
 800460a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800460c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
 800461e:	e005      	b.n	800462c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10b      	bne.n	800464a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f043 0206 	orr.w	r2, r3, #6
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004656:	b004      	add	sp, #16
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	ffbdffbf 	.word	0xffbdffbf

08004660 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d165      	bne.n	8004740 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a41      	ldr	r2, [pc, #260]	; (800477c <USB_SetTurnaroundTime+0x11c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d906      	bls.n	800468a <USB_SetTurnaroundTime+0x2a>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4a40      	ldr	r2, [pc, #256]	; (8004780 <USB_SetTurnaroundTime+0x120>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d802      	bhi.n	800468a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004684:	230f      	movs	r3, #15
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	e062      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a3c      	ldr	r2, [pc, #240]	; (8004780 <USB_SetTurnaroundTime+0x120>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d906      	bls.n	80046a0 <USB_SetTurnaroundTime+0x40>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4a3b      	ldr	r2, [pc, #236]	; (8004784 <USB_SetTurnaroundTime+0x124>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d802      	bhi.n	80046a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800469a:	230e      	movs	r3, #14
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e057      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a38      	ldr	r2, [pc, #224]	; (8004784 <USB_SetTurnaroundTime+0x124>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d906      	bls.n	80046b6 <USB_SetTurnaroundTime+0x56>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a37      	ldr	r2, [pc, #220]	; (8004788 <USB_SetTurnaroundTime+0x128>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d802      	bhi.n	80046b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80046b0:	230d      	movs	r3, #13
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e04c      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4a33      	ldr	r2, [pc, #204]	; (8004788 <USB_SetTurnaroundTime+0x128>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d906      	bls.n	80046cc <USB_SetTurnaroundTime+0x6c>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4a32      	ldr	r2, [pc, #200]	; (800478c <USB_SetTurnaroundTime+0x12c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d802      	bhi.n	80046cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046c6:	230c      	movs	r3, #12
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e041      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4a2f      	ldr	r2, [pc, #188]	; (800478c <USB_SetTurnaroundTime+0x12c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d906      	bls.n	80046e2 <USB_SetTurnaroundTime+0x82>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4a2e      	ldr	r2, [pc, #184]	; (8004790 <USB_SetTurnaroundTime+0x130>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d802      	bhi.n	80046e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80046dc:	230b      	movs	r3, #11
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e036      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <USB_SetTurnaroundTime+0x130>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d906      	bls.n	80046f8 <USB_SetTurnaroundTime+0x98>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4a29      	ldr	r2, [pc, #164]	; (8004794 <USB_SetTurnaroundTime+0x134>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d802      	bhi.n	80046f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046f2:	230a      	movs	r3, #10
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e02b      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4a26      	ldr	r2, [pc, #152]	; (8004794 <USB_SetTurnaroundTime+0x134>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d906      	bls.n	800470e <USB_SetTurnaroundTime+0xae>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4a25      	ldr	r2, [pc, #148]	; (8004798 <USB_SetTurnaroundTime+0x138>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d802      	bhi.n	800470e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004708:	2309      	movs	r3, #9
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e020      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4a21      	ldr	r2, [pc, #132]	; (8004798 <USB_SetTurnaroundTime+0x138>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d906      	bls.n	8004724 <USB_SetTurnaroundTime+0xc4>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <USB_SetTurnaroundTime+0x13c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d802      	bhi.n	8004724 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800471e:	2308      	movs	r3, #8
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e015      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a1d      	ldr	r2, [pc, #116]	; (800479c <USB_SetTurnaroundTime+0x13c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d906      	bls.n	800473a <USB_SetTurnaroundTime+0xda>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4a1c      	ldr	r2, [pc, #112]	; (80047a0 <USB_SetTurnaroundTime+0x140>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d802      	bhi.n	800473a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004734:	2307      	movs	r3, #7
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e00a      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800473a:	2306      	movs	r3, #6
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e007      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004746:	2309      	movs	r3, #9
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e001      	b.n	8004750 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800474c:	2309      	movs	r3, #9
 800474e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	029b      	lsls	r3, r3, #10
 8004764:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004768:	431a      	orrs	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	00d8acbf 	.word	0x00d8acbf
 8004780:	00e4e1bf 	.word	0x00e4e1bf
 8004784:	00f423ff 	.word	0x00f423ff
 8004788:	0106737f 	.word	0x0106737f
 800478c:	011a499f 	.word	0x011a499f
 8004790:	01312cff 	.word	0x01312cff
 8004794:	014ca43f 	.word	0x014ca43f
 8004798:	016e35ff 	.word	0x016e35ff
 800479c:	01a6ab1f 	.word	0x01a6ab1f
 80047a0:	01e847ff 	.word	0x01e847ff

080047a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f043 0201 	orr.w	r2, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f023 0201 	bic.w	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d106      	bne.n	8004814 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60da      	str	r2, [r3, #12]
 8004812:	e00b      	b.n	800482c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	e001      	b.n	800482c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e003      	b.n	8004834 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800482c:	2032      	movs	r0, #50	; 0x32
 800482e:	f7fc f9b1 	bl	8000b94 <HAL_Delay>

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800483c:	b084      	sub	sp, #16
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800484a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	e009      	b.n	8004870 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	3340      	adds	r3, #64	; 0x40
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	2200      	movs	r2, #0
 8004868:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	3301      	adds	r3, #1
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b0e      	cmp	r3, #14
 8004874:	d9f2      	bls.n	800485c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11c      	bne.n	80048b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800488a:	f043 0302 	orr.w	r3, r3, #2
 800488e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e005      	b.n	80048c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048c8:	461a      	mov	r2, r3
 80048ca:	2300      	movs	r3, #0
 80048cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	4619      	mov	r1, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048dc:	461a      	mov	r2, r3
 80048de:	680b      	ldr	r3, [r1, #0]
 80048e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d10c      	bne.n	8004902 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048ee:	2100      	movs	r1, #0
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f949 	bl	8004b88 <USB_SetDevSpeed>
 80048f6:	e008      	b.n	800490a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048f8:	2101      	movs	r1, #1
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f944 	bl	8004b88 <USB_SetDevSpeed>
 8004900:	e003      	b.n	800490a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004902:	2103      	movs	r1, #3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f93f 	bl	8004b88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800490a:	2110      	movs	r1, #16
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8f3 	bl	8004af8 <USB_FlushTxFifo>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f911 	bl	8004b44 <USB_FlushRxFifo>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	461a      	mov	r2, r3
 8004934:	2300      	movs	r3, #0
 8004936:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493e:	461a      	mov	r2, r3
 8004940:	2300      	movs	r3, #0
 8004942:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494a:	461a      	mov	r2, r3
 800494c:	2300      	movs	r3, #0
 800494e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	e043      	b.n	80049de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800496c:	d118      	bne.n	80049a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	461a      	mov	r2, r3
 8004982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e013      	b.n	80049b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004996:	461a      	mov	r2, r3
 8004998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e008      	b.n	80049b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	461a      	mov	r2, r3
 80049ae:	2300      	movs	r3, #0
 80049b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049be:	461a      	mov	r2, r3
 80049c0:	2300      	movs	r3, #0
 80049c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	461a      	mov	r2, r3
 80049d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	3301      	adds	r3, #1
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3b7      	bcc.n	8004956 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	e043      	b.n	8004a74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a02:	d118      	bne.n	8004a36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	461a      	mov	r2, r3
 8004a18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e013      	b.n	8004a48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	e008      	b.n	8004a48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	461a      	mov	r2, r3
 8004a44:	2300      	movs	r3, #0
 8004a46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	461a      	mov	r2, r3
 8004a68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	3301      	adds	r3, #1
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d3b7      	bcc.n	80049ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f043 0210 	orr.w	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <USB_DevInit+0x2b4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f043 0208 	orr.w	r2, r3, #8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d105      	bne.n	8004ae0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699a      	ldr	r2, [r3, #24]
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <USB_DevInit+0x2b8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aec:	b004      	add	sp, #16
 8004aee:	4770      	bx	lr
 8004af0:	803c3800 	.word	0x803c3800
 8004af4:	40000004 	.word	0x40000004

08004af8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	f043 0220 	orr.w	r2, r3, #32
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3301      	adds	r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <USB_FlushTxFifo+0x48>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d901      	bls.n	8004b24 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e006      	b.n	8004b32 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d0f0      	beq.n	8004b12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	00030d40 	.word	0x00030d40

08004b44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2210      	movs	r2, #16
 8004b54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <USB_FlushRxFifo+0x40>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e006      	b.n	8004b76 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d0f0      	beq.n	8004b56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	00030d40 	.word	0x00030d40

08004b88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b087      	sub	sp, #28
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0306 	and.w	r3, r3, #6
 8004bd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
 8004bde:	e00a      	b.n	8004bf6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d002      	beq.n	8004bec <USB_GetDevSpeed+0x32>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b06      	cmp	r3, #6
 8004bea:	d102      	bne.n	8004bf2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bec:	2302      	movs	r3, #2
 8004bee:	75fb      	strb	r3, [r7, #23]
 8004bf0:	e001      	b.n	8004bf6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bf2:	230f      	movs	r3, #15
 8004bf4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d139      	bne.n	8004c94 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	2101      	movs	r1, #1
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	68f9      	ldr	r1, [r7, #12]
 8004c3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d153      	bne.n	8004d00 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	78db      	ldrb	r3, [r3, #3]
 8004c72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	059b      	lsls	r3, r3, #22
 8004c7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	0159      	lsls	r1, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	440b      	add	r3, r1
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4b20      	ldr	r3, [pc, #128]	; (8004d10 <USB_ActivateEndpoint+0x10c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]
 8004c92:	e035      	b.n	8004d00 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	68f9      	ldr	r1, [r7, #12]
 8004cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d119      	bne.n	8004d00 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	78db      	ldrb	r3, [r3, #3]
 8004ce6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	431a      	orrs	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	0159      	lsls	r1, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	440b      	add	r3, r1
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <USB_ActivateEndpoint+0x10c>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	10008000 	.word	0x10008000

08004d14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d161      	bne.n	8004df4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d46:	d11f      	bne.n	8004d88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	2101      	movs	r1, #1
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da8:	4013      	ands	r3, r2
 8004daa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	0159      	lsls	r1, r3, #5
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	440b      	add	r3, r1
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	4619      	mov	r1, r3
 8004dec:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <USB_DeactivateEndpoint+0x1b0>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
 8004df2:	e060      	b.n	8004eb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e0a:	d11f      	bne.n	8004e4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	43db      	mvns	r3, r3
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	2101      	movs	r1, #1
 8004e82:	fa01 f303 	lsl.w	r3, r1, r3
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e90:	4013      	ands	r3, r2
 8004e92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	0159      	lsls	r1, r3, #5
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	440b      	add	r3, r1
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <USB_DeactivateEndpoint+0x1b4>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	ec337800 	.word	0xec337800
 8004ec8:	eff37800 	.word	0xeff37800

08004ecc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	f040 8163 	bne.w	80051b4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d132      	bne.n	8004f5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	0159      	lsls	r1, r3, #5
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	440b      	add	r3, r1
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f10:	4619      	mov	r1, r3
 8004f12:	4ba5      	ldr	r3, [pc, #660]	; (80051a8 <USB_EPStartXfer+0x2dc>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	0159      	lsls	r1, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	440b      	add	r3, r1
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f52:	4619      	mov	r1, r3
 8004f54:	4b95      	ldr	r3, [pc, #596]	; (80051ac <USB_EPStartXfer+0x2e0>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	610b      	str	r3, [r1, #16]
 8004f5a:	e074      	b.n	8005046 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	0159      	lsls	r1, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	440b      	add	r3, r1
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	4619      	mov	r1, r3
 8004f78:	4b8c      	ldr	r3, [pc, #560]	; (80051ac <USB_EPStartXfer+0x2e0>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	0159      	lsls	r1, r3, #5
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	440b      	add	r3, r1
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4b83      	ldr	r3, [pc, #524]	; (80051a8 <USB_EPStartXfer+0x2dc>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6959      	ldr	r1, [r3, #20]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	440b      	add	r3, r1
 8004fb8:	1e59      	subs	r1, r3, #1
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fc2:	04d9      	lsls	r1, r3, #19
 8004fc4:	4b7a      	ldr	r3, [pc, #488]	; (80051b0 <USB_EPStartXfer+0x2e4>)
 8004fc6:	400b      	ands	r3, r1
 8004fc8:	69b9      	ldr	r1, [r7, #24]
 8004fca:	0148      	lsls	r0, r1, #5
 8004fcc:	69f9      	ldr	r1, [r7, #28]
 8004fce:	4401      	add	r1, r0
 8004fd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fee:	69b9      	ldr	r1, [r7, #24]
 8004ff0:	0148      	lsls	r0, r1, #5
 8004ff2:	69f9      	ldr	r1, [r7, #28]
 8004ff4:	4401      	add	r1, r0
 8004ff6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	78db      	ldrb	r3, [r3, #3]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d11f      	bne.n	8005046 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005020:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005024:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005040:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005044:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d14b      	bne.n	80050e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	461a      	mov	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	78db      	ldrb	r3, [r3, #3]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d128      	bne.n	80050c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507c:	2b00      	cmp	r3, #0
 800507e:	d110      	bne.n	80050a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	e00f      	b.n	80050c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e133      	b.n	800534c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005102:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	78db      	ldrb	r3, [r3, #3]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d015      	beq.n	8005138 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 811b 	beq.w	800534c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	2101      	movs	r1, #1
 8005128:	fa01 f303 	lsl.w	r3, r1, r3
 800512c:	69f9      	ldr	r1, [r7, #28]
 800512e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005132:	4313      	orrs	r3, r2
 8005134:	634b      	str	r3, [r1, #52]	; 0x34
 8005136:	e109      	b.n	800534c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d110      	bne.n	800516a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005162:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e00f      	b.n	800518a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005188:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	68d9      	ldr	r1, [r3, #12]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	b298      	uxth	r0, r3
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	4603      	mov	r3, r0
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fa38 	bl	8005614 <USB_WritePacket>
 80051a4:	e0d2      	b.n	800534c <USB_EPStartXfer+0x480>
 80051a6:	bf00      	nop
 80051a8:	e007ffff 	.word	0xe007ffff
 80051ac:	fff80000 	.word	0xfff80000
 80051b0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	0159      	lsls	r1, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	440b      	add	r3, r1
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	4619      	mov	r1, r3
 80051d0:	4b61      	ldr	r3, [pc, #388]	; (8005358 <USB_EPStartXfer+0x48c>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	0159      	lsls	r1, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	440b      	add	r3, r1
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	4619      	mov	r1, r3
 80051f2:	4b5a      	ldr	r3, [pc, #360]	; (800535c <USB_EPStartXfer+0x490>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d123      	bne.n	8005248 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005216:	69b9      	ldr	r1, [r7, #24]
 8005218:	0148      	lsls	r0, r1, #5
 800521a:	69f9      	ldr	r1, [r7, #28]
 800521c:	4401      	add	r1, r0
 800521e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005222:	4313      	orrs	r3, r2
 8005224:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005244:	6113      	str	r3, [r2, #16]
 8005246:	e033      	b.n	80052b0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	695a      	ldr	r2, [r3, #20]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4413      	add	r3, r2
 8005252:	1e5a      	subs	r2, r3, #1
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	8afb      	ldrh	r3, [r7, #22]
 800526e:	04d9      	lsls	r1, r3, #19
 8005270:	4b3b      	ldr	r3, [pc, #236]	; (8005360 <USB_EPStartXfer+0x494>)
 8005272:	400b      	ands	r3, r1
 8005274:	69b9      	ldr	r1, [r7, #24]
 8005276:	0148      	lsls	r0, r1, #5
 8005278:	69f9      	ldr	r1, [r7, #28]
 800527a:	4401      	add	r1, r0
 800527c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005280:	4313      	orrs	r3, r2
 8005282:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	8af9      	ldrh	r1, [r7, #22]
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a0:	69b9      	ldr	r1, [r7, #24]
 80052a2:	0148      	lsls	r0, r1, #5
 80052a4:	69f9      	ldr	r1, [r7, #28]
 80052a6:	4401      	add	r1, r0
 80052a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052ac:	4313      	orrs	r3, r2
 80052ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d10d      	bne.n	80052d2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	68d9      	ldr	r1, [r3, #12]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	460a      	mov	r2, r1
 80052d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	78db      	ldrb	r3, [r3, #3]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d128      	bne.n	800532c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d110      	bne.n	800530c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	0151      	lsls	r1, r2, #5
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	440a      	add	r2, r1
 8005300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	e00f      	b.n	800532c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	0151      	lsls	r1, r2, #5
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	440a      	add	r2, r1
 8005342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005346:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800534a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	fff80000 	.word	0xfff80000
 800535c:	e007ffff 	.word	0xe007ffff
 8005360:	1ff80000 	.word	0x1ff80000

08005364 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b01      	cmp	r3, #1
 8005382:	f040 80cd 	bne.w	8005520 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d132      	bne.n	80053f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	0159      	lsls	r1, r3, #5
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	440b      	add	r3, r1
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	4619      	mov	r1, r3
 80053aa:	4b98      	ldr	r3, [pc, #608]	; (800560c <USB_EP0StartXfer+0x2a8>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	0159      	lsls	r1, r3, #5
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	440b      	add	r3, r1
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	4619      	mov	r1, r3
 80053ec:	4b88      	ldr	r3, [pc, #544]	; (8005610 <USB_EP0StartXfer+0x2ac>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	610b      	str	r3, [r1, #16]
 80053f2:	e04e      	b.n	8005492 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	0159      	lsls	r1, r3, #5
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	440b      	add	r3, r1
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	4619      	mov	r1, r3
 8005410:	4b7f      	ldr	r3, [pc, #508]	; (8005610 <USB_EP0StartXfer+0x2ac>)
 8005412:	4013      	ands	r3, r2
 8005414:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	0159      	lsls	r1, r3, #5
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	440b      	add	r3, r1
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	4619      	mov	r1, r3
 8005432:	4b76      	ldr	r3, [pc, #472]	; (800560c <USB_EP0StartXfer+0x2a8>)
 8005434:	4013      	ands	r3, r2
 8005436:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	429a      	cmp	r2, r3
 8005442:	d903      	bls.n	800544c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005466:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800546a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005482:	6939      	ldr	r1, [r7, #16]
 8005484:	0148      	lsls	r0, r1, #5
 8005486:	6979      	ldr	r1, [r7, #20]
 8005488:	4401      	add	r1, r0
 800548a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800548e:	4313      	orrs	r3, r2
 8005490:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d11e      	bne.n	80054d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	461a      	mov	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e092      	b.n	80055fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	0151      	lsls	r1, r2, #5
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	440a      	add	r2, r1
 80054ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d07e      	beq.n	80055fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	2101      	movs	r1, #1
 8005510:	fa01 f303 	lsl.w	r3, r1, r3
 8005514:	6979      	ldr	r1, [r7, #20]
 8005516:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800551a:	4313      	orrs	r3, r2
 800551c:	634b      	str	r3, [r1, #52]	; 0x34
 800551e:	e06d      	b.n	80055fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	0159      	lsls	r1, r3, #5
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	440b      	add	r3, r1
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	4619      	mov	r1, r3
 800553c:	4b34      	ldr	r3, [pc, #208]	; (8005610 <USB_EP0StartXfer+0x2ac>)
 800553e:	4013      	ands	r3, r2
 8005540:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	0159      	lsls	r1, r3, #5
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	440b      	add	r3, r1
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	4619      	mov	r1, r3
 800555e:	4b2b      	ldr	r3, [pc, #172]	; (800560c <USB_EP0StartXfer+0x2a8>)
 8005560:	4013      	ands	r3, r2
 8005562:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005592:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055aa:	6939      	ldr	r1, [r7, #16]
 80055ac:	0148      	lsls	r0, r1, #5
 80055ae:	6979      	ldr	r1, [r7, #20]
 80055b0:	4401      	add	r1, r0
 80055b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055b6:	4313      	orrs	r3, r2
 80055b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d10d      	bne.n	80055dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d009      	beq.n	80055dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	68d9      	ldr	r1, [r3, #12]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	460a      	mov	r2, r1
 80055da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	e007ffff 	.word	0xe007ffff
 8005610:	fff80000 	.word	0xfff80000

08005614 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	; 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4611      	mov	r1, r2
 8005620:	461a      	mov	r2, r3
 8005622:	460b      	mov	r3, r1
 8005624:	71fb      	strb	r3, [r7, #7]
 8005626:	4613      	mov	r3, r2
 8005628:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11a      	bne.n	8005670 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800563a:	88bb      	ldrh	r3, [r7, #4]
 800563c:	3303      	adds	r3, #3
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
 8005646:	e00f      	b.n	8005668 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	031a      	lsls	r2, r3, #12
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4413      	add	r3, r2
 8005650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005654:	461a      	mov	r2, r3
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3304      	adds	r3, #4
 8005660:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	3301      	adds	r3, #1
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	429a      	cmp	r2, r3
 800566e:	d3eb      	bcc.n	8005648 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3724      	adds	r7, #36	; 0x24
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800567e:	b480      	push	{r7}
 8005680:	b089      	sub	sp, #36	; 0x24
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	4613      	mov	r3, r2
 800568a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005694:	88fb      	ldrh	r3, [r7, #6]
 8005696:	3303      	adds	r3, #3
 8005698:	089b      	lsrs	r3, r3, #2
 800569a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800569c:	2300      	movs	r3, #0
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e00b      	b.n	80056ba <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	601a      	str	r2, [r3, #0]
    pDest++;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	3304      	adds	r3, #4
 80056b2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	3301      	adds	r3, #1
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d3ef      	bcc.n	80056a2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80056c2:	69fb      	ldr	r3, [r7, #28]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3724      	adds	r7, #36	; 0x24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d12c      	bne.n	8005746 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	db12      	blt.n	8005724 <USB_EPSetStall+0x54>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00f      	beq.n	8005724 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	440a      	add	r2, r1
 800571a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005722:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	e02b      	b.n	800579e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	db12      	blt.n	800577e <USB_EPSetStall+0xae>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00f      	beq.n	800577e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005778:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800577c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800579c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d128      	bne.n	800581a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d003      	beq.n	80057f8 <USB_EPClearStall+0x4c>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	78db      	ldrb	r3, [r3, #3]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d138      	bne.n	800586a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	e027      	b.n	800586a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005834:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005838:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	78db      	ldrb	r3, [r3, #3]
 800583e:	2b03      	cmp	r3, #3
 8005840:	d003      	beq.n	800584a <USB_EPClearStall+0x9e>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	78db      	ldrb	r3, [r3, #3]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d10f      	bne.n	800586a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005868:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005896:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800589a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b2:	4313      	orrs	r3, r2
 80058b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058de:	f023 0302 	bic.w	r3, r3, #2
 80058e2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80058e4:	2003      	movs	r0, #3
 80058e6:	f7fb f955 	bl	8000b94 <HAL_Delay>

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005914:	2003      	movs	r0, #3
 8005916:	f7fb f93d 	bl	8000b94 <HAL_Delay>

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4013      	ands	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800593c:	68fb      	ldr	r3, [r7, #12]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	0c1b      	lsrs	r3, r3, #16
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	4013      	ands	r3, r2
 80059a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	b29b      	uxth	r3, r3
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	4013      	ands	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059e0:	68bb      	ldr	r3, [r7, #8]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b087      	sub	sp, #28
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	f003 030f 	and.w	r3, r3, #15
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	01db      	lsls	r3, r3, #7
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0301 	and.w	r3, r3, #1
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a82:	4619      	mov	r1, r3
 8005a84:	4b09      	ldr	r3, [pc, #36]	; (8005aac <USB_ActivateSetup+0x44>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	fffff800 	.word	0xfffff800

08005ab0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	333c      	adds	r3, #60	; 0x3c
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4a26      	ldr	r2, [pc, #152]	; (8005b68 <USB_EP0_OutStart+0xb8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d90a      	bls.n	8005aea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae4:	d101      	bne.n	8005aea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e037      	b.n	8005b5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af0:	461a      	mov	r2, r3
 8005af2:	2300      	movs	r3, #0
 8005af4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b18:	f043 0318 	orr.w	r3, r3, #24
 8005b1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b32:	7afb      	ldrb	r3, [r7, #11]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d10f      	bne.n	8005b58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	461a      	mov	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	4f54300a 	.word	0x4f54300a

08005b6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <USB_CoreReset+0x64>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e01b      	b.n	8005bc2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	daf2      	bge.n	8005b78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f043 0201 	orr.w	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <USB_CoreReset+0x64>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d901      	bls.n	8005bb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e006      	b.n	8005bc2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d0f0      	beq.n	8005ba2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	00030d40 	.word	0x00030d40

08005bd4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e025      	b.n	8005c38 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	79fa      	ldrb	r2, [r7, #7]
 8005c2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f001 fcfb 	bl	8007628 <USBD_LL_Init>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e010      	b.n	8005c7a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	f107 020e 	add.w	r2, r7, #14
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4798      	blx	r3
 8005c70:	4602      	mov	r2, r0
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fd1c 	bl	80076c8 <USBD_LL_Start>
 8005c90:	4603      	mov	r3, r0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	78fa      	ldrb	r2, [r7, #3]
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
 8005cda:	4603      	mov	r3, r0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	4611      	mov	r1, r2
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	4798      	blx	r3
  }

  return USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 ff2c 	bl	8006b88 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d3e:	461a      	mov	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d4c:	f003 031f 	and.w	r3, r3, #31
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d00e      	beq.n	8005d72 <USBD_LL_SetupStage+0x5a>
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d302      	bcc.n	8005d5e <USBD_LL_SetupStage+0x46>
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d014      	beq.n	8005d86 <USBD_LL_SetupStage+0x6e>
 8005d5c:	e01d      	b.n	8005d9a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa18 	bl	800619c <USBD_StdDevReq>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d70:	e020      	b.n	8005db4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fa7c 	bl	8006278 <USBD_StdItfReq>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73fb      	strb	r3, [r7, #15]
      break;
 8005d84:	e016      	b.n	8005db4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fab8 	bl	8006304 <USBD_StdEPReq>
 8005d94:	4603      	mov	r3, r0
 8005d96:	73fb      	strb	r3, [r7, #15]
      break;
 8005d98:	e00c      	b.n	8005db4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005da0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 fced 	bl	8007788 <USBD_LL_StallEP>
 8005dae:	4603      	mov	r3, r0
 8005db0:	73fb      	strb	r3, [r7, #15]
      break;
 8005db2:	bf00      	nop
  }

  return ret;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b086      	sub	sp, #24
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	607a      	str	r2, [r7, #4]
 8005dca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005dcc:	7afb      	ldrb	r3, [r7, #11]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d137      	bne.n	8005e42 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005dd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d14a      	bne.n	8005e7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d913      	bls.n	8005e18 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	1ad2      	subs	r2, r2, r3
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	4293      	cmp	r3, r2
 8005e08:	bf28      	it	cs
 8005e0a:	4613      	movcs	r3, r2
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f001 f957 	bl	80070c4 <USBD_CtlContinueRx>
 8005e16:	e030      	b.n	8005e7a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d105      	bne.n	8005e3a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f001 f953 	bl	80070e6 <USBD_CtlSendStatus>
 8005e40:	e01b      	b.n	8005e7a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d013      	beq.n	8005e76 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d10e      	bne.n	8005e76 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	7afa      	ldrb	r2, [r7, #11]
 8005e62:	4611      	mov	r1, r2
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	4798      	blx	r3
 8005e68:	4603      	mov	r3, r0
 8005e6a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
 8005e74:	e002      	b.n	8005e7c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e000      	b.n	8005e7c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d16a      	bne.n	8005f6e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d155      	bne.n	8005f54 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d914      	bls.n	8005ede <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	1ad2      	subs	r2, r2, r3
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f001 f8e9 	bl	80070a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f001 fd00 	bl	80078dc <USBD_LL_PrepareReceive>
 8005edc:	e03a      	b.n	8005f54 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d11c      	bne.n	8005f24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d316      	bcc.n	8005f24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d20f      	bcs.n	8005f24 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f04:	2200      	movs	r2, #0
 8005f06:	2100      	movs	r1, #0
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f001 f8ca 	bl	80070a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f16:	2300      	movs	r3, #0
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f001 fcdd 	bl	80078dc <USBD_LL_PrepareReceive>
 8005f22:	e017      	b.n	8005f54 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d105      	bne.n	8005f46 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f001 fc1d 	bl	8007788 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f001 f8dc 	bl	800710c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d123      	bne.n	8005fa6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff fe9b 	bl	8005c9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f6c:	e01b      	b.n	8005fa6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d013      	beq.n	8005fa2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d10e      	bne.n	8005fa2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	7afa      	ldrb	r2, [r7, #11]
 8005f8e:	4611      	mov	r1, r2
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	4798      	blx	r3
 8005f94:	4603      	mov	r3, r0
 8005f96:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005f9e:	7dfb      	ldrb	r3, [r7, #23]
 8005fa0:	e002      	b.n	8005fa8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e000      	b.n	8005fa8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d009      	beq.n	8005ff4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6852      	ldr	r2, [r2, #4]
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	4611      	mov	r1, r2
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ff4:	2340      	movs	r3, #64	; 0x40
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fb7f 	bl	80076fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2240      	movs	r2, #64	; 0x40
 800600c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006010:	2340      	movs	r3, #64	; 0x40
 8006012:	2200      	movs	r2, #0
 8006014:	2180      	movs	r1, #128	; 0x80
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f001 fb71 	bl	80076fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2240      	movs	r2, #64	; 0x40
 8006026:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	460b      	mov	r3, r1
 800603c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2204      	movs	r2, #4
 800606a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800608a:	2b04      	cmp	r3, #4
 800608c:	d105      	bne.n	800609a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d10b      	bne.n	80060d2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b082      	sub	sp, #8
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613c:	2b00      	cmp	r3, #0
 800613e:	d009      	beq.n	8006154 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6852      	ldr	r2, [r2, #4]
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	4611      	mov	r1, r2
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
  }

  return USBD_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800615e:	b480      	push	{r7}
 8006160:	b087      	sub	sp, #28
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	3301      	adds	r3, #1
 8006174:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800617c:	8a3b      	ldrh	r3, [r7, #16]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	b21a      	sxth	r2, r3
 8006182:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006186:	4313      	orrs	r3, r2
 8006188:	b21b      	sxth	r3, r3
 800618a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800618c:	89fb      	ldrh	r3, [r7, #14]
}
 800618e:	4618      	mov	r0, r3
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d004      	beq.n	80061c0 <USBD_StdDevReq+0x24>
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	d002      	beq.n	80061c0 <USBD_StdDevReq+0x24>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <USBD_StdDevReq+0x38>
 80061be:	e050      	b.n	8006262 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	73fb      	strb	r3, [r7, #15]
    break;
 80061d2:	e04b      	b.n	800626c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b09      	cmp	r3, #9
 80061da:	d83c      	bhi.n	8006256 <USBD_StdDevReq+0xba>
 80061dc:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <USBD_StdDevReq+0x48>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	08006239 	.word	0x08006239
 80061e8:	0800624d 	.word	0x0800624d
 80061ec:	08006257 	.word	0x08006257
 80061f0:	08006243 	.word	0x08006243
 80061f4:	08006257 	.word	0x08006257
 80061f8:	08006217 	.word	0x08006217
 80061fc:	0800620d 	.word	0x0800620d
 8006200:	08006257 	.word	0x08006257
 8006204:	0800622f 	.word	0x0800622f
 8006208:	08006221 	.word	0x08006221
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f9ce 	bl	80065b0 <USBD_GetDescriptor>
      break;
 8006214:	e024      	b.n	8006260 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fb33 	bl	8006884 <USBD_SetAddress>
      break;
 800621e:	e01f      	b.n	8006260 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fb70 	bl	8006908 <USBD_SetConfig>
 8006228:	4603      	mov	r3, r0
 800622a:	73fb      	strb	r3, [r7, #15]
      break;
 800622c:	e018      	b.n	8006260 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fc0d 	bl	8006a50 <USBD_GetConfig>
      break;
 8006236:	e013      	b.n	8006260 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fc3c 	bl	8006ab8 <USBD_GetStatus>
      break;
 8006240:	e00e      	b.n	8006260 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fc6a 	bl	8006b1e <USBD_SetFeature>
      break;
 800624a:	e009      	b.n	8006260 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fc79 	bl	8006b46 <USBD_ClrFeature>
      break;
 8006254:	e004      	b.n	8006260 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fccf 	bl	8006bfc <USBD_CtlError>
      break;
 800625e:	bf00      	nop
    }
    break;
 8006260:	e004      	b.n	800626c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fcc9 	bl	8006bfc <USBD_CtlError>
    break;
 800626a:	bf00      	nop
  }

  return ret;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop

08006278 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800628e:	2b20      	cmp	r3, #32
 8006290:	d003      	beq.n	800629a <USBD_StdItfReq+0x22>
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d001      	beq.n	800629a <USBD_StdItfReq+0x22>
 8006296:	2b00      	cmp	r3, #0
 8006298:	d12a      	bne.n	80062f0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a0:	3b01      	subs	r3, #1
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d81d      	bhi.n	80062e2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	889b      	ldrh	r3, [r3, #4]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d813      	bhi.n	80062d8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
 80062be:	4603      	mov	r3, r0
 80062c0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	88db      	ldrh	r3, [r3, #6]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d110      	bne.n	80062ec <USBD_StdItfReq+0x74>
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10d      	bne.n	80062ec <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 ff08 	bl	80070e6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80062d6:	e009      	b.n	80062ec <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fc8e 	bl	8006bfc <USBD_CtlError>
      break;
 80062e0:	e004      	b.n	80062ec <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fc89 	bl	8006bfc <USBD_CtlError>
      break;
 80062ea:	e000      	b.n	80062ee <USBD_StdItfReq+0x76>
      break;
 80062ec:	bf00      	nop
    }
    break;
 80062ee:	e004      	b.n	80062fa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fc82 	bl	8006bfc <USBD_CtlError>
    break;
 80062f8:	bf00      	nop
  }

  return ret;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	889b      	ldrh	r3, [r3, #4]
 8006316:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006320:	2b20      	cmp	r3, #32
 8006322:	d004      	beq.n	800632e <USBD_StdEPReq+0x2a>
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	d002      	beq.n	800632e <USBD_StdEPReq+0x2a>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <USBD_StdEPReq+0x3e>
 800632c:	e135      	b.n	800659a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	4798      	blx	r3
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]
    break;
 8006340:	e130      	b.n	80065a4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d03e      	beq.n	80063c8 <USBD_StdEPReq+0xc4>
 800634a:	2b03      	cmp	r3, #3
 800634c:	d002      	beq.n	8006354 <USBD_StdEPReq+0x50>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d077      	beq.n	8006442 <USBD_StdEPReq+0x13e>
 8006352:	e11c      	b.n	800658e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635a:	2b02      	cmp	r3, #2
 800635c:	d002      	beq.n	8006364 <USBD_StdEPReq+0x60>
 800635e:	2b03      	cmp	r3, #3
 8006360:	d015      	beq.n	800638e <USBD_StdEPReq+0x8a>
 8006362:	e02b      	b.n	80063bc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00c      	beq.n	8006384 <USBD_StdEPReq+0x80>
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d009      	beq.n	8006384 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 fa07 	bl	8007788 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 fa03 	bl	8007788 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006382:	e020      	b.n	80063c6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fc38 	bl	8006bfc <USBD_CtlError>
        break;
 800638c:	e01b      	b.n	80063c6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	885b      	ldrh	r3, [r3, #2]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10e      	bne.n	80063b4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00b      	beq.n	80063b4 <USBD_StdEPReq+0xb0>
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d008      	beq.n	80063b4 <USBD_StdEPReq+0xb0>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	88db      	ldrh	r3, [r3, #6]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d104      	bne.n	80063b4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 f9ea 	bl	8007788 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fe96 	bl	80070e6 <USBD_CtlSendStatus>

        break;
 80063ba:	e004      	b.n	80063c6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fc1c 	bl	8006bfc <USBD_CtlError>
        break;
 80063c4:	bf00      	nop
      }
      break;
 80063c6:	e0e7      	b.n	8006598 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d002      	beq.n	80063d8 <USBD_StdEPReq+0xd4>
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d015      	beq.n	8006402 <USBD_StdEPReq+0xfe>
 80063d6:	e02d      	b.n	8006434 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <USBD_StdEPReq+0xf4>
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b80      	cmp	r3, #128	; 0x80
 80063e2:	d009      	beq.n	80063f8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 f9cd 	bl	8007788 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063ee:	2180      	movs	r1, #128	; 0x80
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 f9c9 	bl	8007788 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80063f6:	e023      	b.n	8006440 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fbfe 	bl	8006bfc <USBD_CtlError>
        break;
 8006400:	e01e      	b.n	8006440 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	885b      	ldrh	r3, [r3, #2]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d119      	bne.n	800643e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 f9d4 	bl	80077c6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fe61 	bl	80070e6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
        }
        break;
 8006432:	e004      	b.n	800643e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fbe0 	bl	8006bfc <USBD_CtlError>
        break;
 800643c:	e000      	b.n	8006440 <USBD_StdEPReq+0x13c>
        break;
 800643e:	bf00      	nop
      }
      break;
 8006440:	e0aa      	b.n	8006598 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006448:	2b02      	cmp	r3, #2
 800644a:	d002      	beq.n	8006452 <USBD_StdEPReq+0x14e>
 800644c:	2b03      	cmp	r3, #3
 800644e:	d032      	beq.n	80064b6 <USBD_StdEPReq+0x1b2>
 8006450:	e097      	b.n	8006582 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <USBD_StdEPReq+0x164>
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b80      	cmp	r3, #128	; 0x80
 800645c:	d004      	beq.n	8006468 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fbcb 	bl	8006bfc <USBD_CtlError>
          break;
 8006466:	e091      	b.n	800658c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800646c:	2b00      	cmp	r3, #0
 800646e:	da0b      	bge.n	8006488 <USBD_StdEPReq+0x184>
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	3310      	adds	r3, #16
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	4413      	add	r3, r2
 8006484:	3304      	adds	r3, #4
 8006486:	e00b      	b.n	80064a0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4413      	add	r3, r2
 800649e:	3304      	adds	r3, #4
 80064a0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2202      	movs	r2, #2
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fddc 	bl	800706c <USBD_CtlSendData>
        break;
 80064b4:	e06a      	b.n	800658c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80064b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da11      	bge.n	80064e2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	f003 020f 	and.w	r2, r3, #15
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	3324      	adds	r3, #36	; 0x24
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d117      	bne.n	8006508 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fb8e 	bl	8006bfc <USBD_CtlError>
            break;
 80064e0:	e054      	b.n	800658c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	f003 020f 	and.w	r2, r3, #15
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fb7b 	bl	8006bfc <USBD_CtlError>
            break;
 8006506:	e041      	b.n	800658c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800650c:	2b00      	cmp	r3, #0
 800650e:	da0b      	bge.n	8006528 <USBD_StdEPReq+0x224>
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	3310      	adds	r3, #16
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4413      	add	r3, r2
 8006524:	3304      	adds	r3, #4
 8006526:	e00b      	b.n	8006540 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	3304      	adds	r3, #4
 8006540:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <USBD_StdEPReq+0x24a>
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b80      	cmp	r3, #128	; 0x80
 800654c:	d103      	bne.n	8006556 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	e00e      	b.n	8006574 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f001 f952 	bl	8007804 <USBD_LL_IsStallEP>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e002      	b.n	8006574 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2202      	movs	r2, #2
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fd76 	bl	800706c <USBD_CtlSendData>
          break;
 8006580:	e004      	b.n	800658c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fb39 	bl	8006bfc <USBD_CtlError>
        break;
 800658a:	bf00      	nop
      }
      break;
 800658c:	e004      	b.n	8006598 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fb33 	bl	8006bfc <USBD_CtlError>
      break;
 8006596:	bf00      	nop
    }
    break;
 8006598:	e004      	b.n	80065a4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fb2d 	bl	8006bfc <USBD_CtlError>
    break;
 80065a2:	bf00      	nop
  }

  return ret;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	885b      	ldrh	r3, [r3, #2]
 80065ca:	0a1b      	lsrs	r3, r3, #8
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	2b06      	cmp	r3, #6
 80065d2:	f200 8128 	bhi.w	8006826 <USBD_GetDescriptor+0x276>
 80065d6:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <USBD_GetDescriptor+0x2c>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080065f9 	.word	0x080065f9
 80065e0:	08006611 	.word	0x08006611
 80065e4:	08006651 	.word	0x08006651
 80065e8:	08006827 	.word	0x08006827
 80065ec:	08006827 	.word	0x08006827
 80065f0:	080067c7 	.word	0x080067c7
 80065f4:	080067f3 	.word	0x080067f3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	7c12      	ldrb	r2, [r2, #16]
 8006604:	f107 0108 	add.w	r1, r7, #8
 8006608:	4610      	mov	r0, r2
 800660a:	4798      	blx	r3
 800660c:	60f8      	str	r0, [r7, #12]
    break;
 800660e:	e112      	b.n	8006836 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7c1b      	ldrb	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10d      	bne.n	8006634 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	f107 0208 	add.w	r2, r7, #8
 8006624:	4610      	mov	r0, r2
 8006626:	4798      	blx	r3
 8006628:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3301      	adds	r3, #1
 800662e:	2202      	movs	r2, #2
 8006630:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006632:	e100      	b.n	8006836 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	f107 0208 	add.w	r2, r7, #8
 8006640:	4610      	mov	r0, r2
 8006642:	4798      	blx	r3
 8006644:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3301      	adds	r3, #1
 800664a:	2202      	movs	r2, #2
 800664c:	701a      	strb	r2, [r3, #0]
    break;
 800664e:	e0f2      	b.n	8006836 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	885b      	ldrh	r3, [r3, #2]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b05      	cmp	r3, #5
 8006658:	f200 80ac 	bhi.w	80067b4 <USBD_GetDescriptor+0x204>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <USBD_GetDescriptor+0xb4>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	0800667d 	.word	0x0800667d
 8006668:	080066b1 	.word	0x080066b1
 800666c:	080066e5 	.word	0x080066e5
 8006670:	08006719 	.word	0x08006719
 8006674:	0800674d 	.word	0x0800674d
 8006678:	08006781 	.word	0x08006781
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	7c12      	ldrb	r2, [r2, #16]
 8006694:	f107 0108 	add.w	r1, r7, #8
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
 800669c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800669e:	e091      	b.n	80067c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 faaa 	bl	8006bfc <USBD_CtlError>
        err++;
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	3301      	adds	r3, #1
 80066ac:	72fb      	strb	r3, [r7, #11]
      break;
 80066ae:	e089      	b.n	80067c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	7c12      	ldrb	r2, [r2, #16]
 80066c8:	f107 0108 	add.w	r1, r7, #8
 80066cc:	4610      	mov	r0, r2
 80066ce:	4798      	blx	r3
 80066d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066d2:	e077      	b.n	80067c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa90 	bl	8006bfc <USBD_CtlError>
        err++;
 80066dc:	7afb      	ldrb	r3, [r7, #11]
 80066de:	3301      	adds	r3, #1
 80066e0:	72fb      	strb	r3, [r7, #11]
      break;
 80066e2:	e06f      	b.n	80067c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006706:	e05d      	b.n	80067c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa76 	bl	8006bfc <USBD_CtlError>
        err++;
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	3301      	adds	r3, #1
 8006714:	72fb      	strb	r3, [r7, #11]
      break;
 8006716:	e055      	b.n	80067c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	7c12      	ldrb	r2, [r2, #16]
 8006730:	f107 0108 	add.w	r1, r7, #8
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
 8006738:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800673a:	e043      	b.n	80067c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa5c 	bl	8006bfc <USBD_CtlError>
        err++;
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	3301      	adds	r3, #1
 8006748:	72fb      	strb	r3, [r7, #11]
      break;
 800674a:	e03b      	b.n	80067c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	7c12      	ldrb	r2, [r2, #16]
 8006764:	f107 0108 	add.w	r1, r7, #8
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
 800676c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800676e:	e029      	b.n	80067c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa42 	bl	8006bfc <USBD_CtlError>
        err++;
 8006778:	7afb      	ldrb	r3, [r7, #11]
 800677a:	3301      	adds	r3, #1
 800677c:	72fb      	strb	r3, [r7, #11]
      break;
 800677e:	e021      	b.n	80067c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	7c12      	ldrb	r2, [r2, #16]
 8006798:	f107 0108 	add.w	r1, r7, #8
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067a2:	e00f      	b.n	80067c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa28 	bl	8006bfc <USBD_CtlError>
        err++;
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	3301      	adds	r3, #1
 80067b0:	72fb      	strb	r3, [r7, #11]
      break;
 80067b2:	e007      	b.n	80067c4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa20 	bl	8006bfc <USBD_CtlError>
      err++;
 80067bc:	7afb      	ldrb	r3, [r7, #11]
 80067be:	3301      	adds	r3, #1
 80067c0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80067c2:	bf00      	nop
    }
    break;
 80067c4:	e037      	b.n	8006836 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	7c1b      	ldrb	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d6:	f107 0208 	add.w	r2, r7, #8
 80067da:	4610      	mov	r0, r2
 80067dc:	4798      	blx	r3
 80067de:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80067e0:	e029      	b.n	8006836 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fa09 	bl	8006bfc <USBD_CtlError>
      err++;
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	3301      	adds	r3, #1
 80067ee:	72fb      	strb	r3, [r7, #11]
    break;
 80067f0:	e021      	b.n	8006836 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7c1b      	ldrb	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10d      	bne.n	8006816 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f107 0208 	add.w	r2, r7, #8
 8006806:	4610      	mov	r0, r2
 8006808:	4798      	blx	r3
 800680a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	2207      	movs	r2, #7
 8006812:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006814:	e00f      	b.n	8006836 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f9ef 	bl	8006bfc <USBD_CtlError>
      err++;
 800681e:	7afb      	ldrb	r3, [r7, #11]
 8006820:	3301      	adds	r3, #1
 8006822:	72fb      	strb	r3, [r7, #11]
    break;
 8006824:	e007      	b.n	8006836 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f9e7 	bl	8006bfc <USBD_CtlError>
    err++;
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	3301      	adds	r3, #1
 8006832:	72fb      	strb	r3, [r7, #11]
    break;
 8006834:	bf00      	nop
  }

  if (err != 0U)
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d11e      	bne.n	800687a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	88db      	ldrh	r3, [r3, #6]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d016      	beq.n	8006872 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006844:	893b      	ldrh	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00e      	beq.n	8006868 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	88da      	ldrh	r2, [r3, #6]
 800684e:	893b      	ldrh	r3, [r7, #8]
 8006850:	4293      	cmp	r3, r2
 8006852:	bf28      	it	cs
 8006854:	4613      	movcs	r3, r2
 8006856:	b29b      	uxth	r3, r3
 8006858:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800685a:	893b      	ldrh	r3, [r7, #8]
 800685c:	461a      	mov	r2, r3
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fc03 	bl	800706c <USBD_CtlSendData>
 8006866:	e009      	b.n	800687c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f9c6 	bl	8006bfc <USBD_CtlError>
 8006870:	e004      	b.n	800687c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fc37 	bl	80070e6 <USBD_CtlSendStatus>
 8006878:	e000      	b.n	800687c <USBD_GetDescriptor+0x2cc>
    return;
 800687a:	bf00      	nop
    }
  }
}
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop

08006884 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	889b      	ldrh	r3, [r3, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d130      	bne.n	80068f8 <USBD_SetAddress+0x74>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	88db      	ldrh	r3, [r3, #6]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d12c      	bne.n	80068f8 <USBD_SetAddress+0x74>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	885b      	ldrh	r3, [r3, #2]
 80068a2:	2b7f      	cmp	r3, #127	; 0x7f
 80068a4:	d828      	bhi.n	80068f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	885b      	ldrh	r3, [r3, #2]
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d104      	bne.n	80068c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f99c 	bl	8006bfc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c4:	e01c      	b.n	8006900 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	7bfa      	ldrb	r2, [r7, #15]
 80068ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 ffc2 	bl	800785c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fc04 	bl	80070e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ec:	e008      	b.n	8006900 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f6:	e003      	b.n	8006900 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f97e 	bl	8006bfc <USBD_CtlError>
  }
}
 8006900:	bf00      	nop
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	885b      	ldrh	r3, [r3, #2]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	4b4b      	ldr	r3, [pc, #300]	; (8006a4c <USBD_SetConfig+0x144>)
 800691e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006920:	4b4a      	ldr	r3, [pc, #296]	; (8006a4c <USBD_SetConfig+0x144>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d905      	bls.n	8006934 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f966 	bl	8006bfc <USBD_CtlError>
    return USBD_FAIL;
 8006930:	2303      	movs	r3, #3
 8006932:	e087      	b.n	8006a44 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693a:	2b02      	cmp	r3, #2
 800693c:	d002      	beq.n	8006944 <USBD_SetConfig+0x3c>
 800693e:	2b03      	cmp	r3, #3
 8006940:	d025      	beq.n	800698e <USBD_SetConfig+0x86>
 8006942:	e071      	b.n	8006a28 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006944:	4b41      	ldr	r3, [pc, #260]	; (8006a4c <USBD_SetConfig+0x144>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01c      	beq.n	8006986 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800694c:	4b3f      	ldr	r3, [pc, #252]	; (8006a4c <USBD_SetConfig+0x144>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006956:	4b3d      	ldr	r3, [pc, #244]	; (8006a4c <USBD_SetConfig+0x144>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff f9a7 	bl	8005cb0 <USBD_SetClassConfig>
 8006962:	4603      	mov	r3, r0
 8006964:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f944 	bl	8006bfc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006974:	e065      	b.n	8006a42 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fbb5 	bl	80070e6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2203      	movs	r2, #3
 8006980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006984:	e05d      	b.n	8006a42 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fbad 	bl	80070e6 <USBD_CtlSendStatus>
    break;
 800698c:	e059      	b.n	8006a42 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800698e:	4b2f      	ldr	r3, [pc, #188]	; (8006a4c <USBD_SetConfig+0x144>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d112      	bne.n	80069bc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800699e:	4b2b      	ldr	r3, [pc, #172]	; (8006a4c <USBD_SetConfig+0x144>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069a8:	4b28      	ldr	r3, [pc, #160]	; (8006a4c <USBD_SetConfig+0x144>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff f99a 	bl	8005ce8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fb96 	bl	80070e6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80069ba:	e042      	b.n	8006a42 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80069bc:	4b23      	ldr	r3, [pc, #140]	; (8006a4c <USBD_SetConfig+0x144>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d02a      	beq.n	8006a20 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff f988 	bl	8005ce8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80069d8:	4b1c      	ldr	r3, [pc, #112]	; (8006a4c <USBD_SetConfig+0x144>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80069e2:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <USBD_SetConfig+0x144>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff f961 	bl	8005cb0 <USBD_SetClassConfig>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00f      	beq.n	8006a18 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f8fe 	bl	8006bfc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff f96d 	bl	8005ce8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006a16:	e014      	b.n	8006a42 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fb64 	bl	80070e6 <USBD_CtlSendStatus>
    break;
 8006a1e:	e010      	b.n	8006a42 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fb60 	bl	80070e6 <USBD_CtlSendStatus>
    break;
 8006a26:	e00c      	b.n	8006a42 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f8e6 	bl	8006bfc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <USBD_SetConfig+0x144>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff f956 	bl	8005ce8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a40:	bf00      	nop
  }

  return ret;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	200001f4 	.word	0x200001f4

08006a50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	88db      	ldrh	r3, [r3, #6]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d004      	beq.n	8006a6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8c9 	bl	8006bfc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006a6a:	e021      	b.n	8006ab0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	db17      	blt.n	8006aa6 <USBD_GetConfig+0x56>
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	dd02      	ble.n	8006a80 <USBD_GetConfig+0x30>
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d00b      	beq.n	8006a96 <USBD_GetConfig+0x46>
 8006a7e:	e012      	b.n	8006aa6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 faec 	bl	800706c <USBD_CtlSendData>
      break;
 8006a94:	e00c      	b.n	8006ab0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fae4 	bl	800706c <USBD_CtlSendData>
      break;
 8006aa4:	e004      	b.n	8006ab0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f8a7 	bl	8006bfc <USBD_CtlError>
      break;
 8006aae:	bf00      	nop
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d81e      	bhi.n	8006b0c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	88db      	ldrh	r3, [r3, #6]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d004      	beq.n	8006ae0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f88f 	bl	8006bfc <USBD_CtlError>
      break;
 8006ade:	e01a      	b.n	8006b16 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f043 0202 	orr.w	r2, r3, #2
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	330c      	adds	r3, #12
 8006b00:	2202      	movs	r2, #2
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fab1 	bl	800706c <USBD_CtlSendData>
    break;
 8006b0a:	e004      	b.n	8006b16 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f874 	bl	8006bfc <USBD_CtlError>
    break;
 8006b14:	bf00      	nop
  }
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	885b      	ldrh	r3, [r3, #2]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d106      	bne.n	8006b3e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fad4 	bl	80070e6 <USBD_CtlSendStatus>
  }
}
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b56:	3b01      	subs	r3, #1
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d80b      	bhi.n	8006b74 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	885b      	ldrh	r3, [r3, #2]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d10c      	bne.n	8006b7e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 faba 	bl	80070e6 <USBD_CtlSendStatus>
      }
      break;
 8006b72:	e004      	b.n	8006b7e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f840 	bl	8006bfc <USBD_CtlError>
      break;
 8006b7c:	e000      	b.n	8006b80 <USBD_ClrFeature+0x3a>
      break;
 8006b7e:	bf00      	nop
  }
}
 8006b80:	bf00      	nop
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	781a      	ldrb	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff fad3 	bl	800615e <SWAPBYTE>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff fac6 	bl	800615e <SWAPBYTE>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fab9 	bl	800615e <SWAPBYTE>
 8006bec:	4603      	mov	r3, r0
 8006bee:	461a      	mov	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	80da      	strh	r2, [r3, #6]
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c06:	2180      	movs	r1, #128	; 0x80
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fdbd 	bl	8007788 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fdb9 	bl	8007788 <USBD_LL_StallEP>
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b086      	sub	sp, #24
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d036      	beq.n	8006ca2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c38:	6938      	ldr	r0, [r7, #16]
 8006c3a:	f000 f836 	bl	8006caa <USBD_GetLen>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	3301      	adds	r3, #1
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	4413      	add	r3, r2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	7812      	ldrb	r2, [r2, #0]
 8006c56:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	4413      	add	r3, r2
 8006c64:	2203      	movs	r2, #3
 8006c66:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c6e:	e013      	b.n	8006c98 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	4413      	add	r3, r2
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	7812      	ldrb	r2, [r2, #0]
 8006c7a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	613b      	str	r3, [r7, #16]
    idx++;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	3301      	adds	r3, #1
 8006c86:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	3301      	adds	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e7      	bne.n	8006c70 <USBD_GetString+0x52>
 8006ca0:	e000      	b.n	8006ca4 <USBD_GetString+0x86>
    return;
 8006ca2:	bf00      	nop
  }
}
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cba:	e005      	b.n	8006cc8 <USBD_GetLen+0x1e>
  {
    len++;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f5      	bne.n	8006cbc <USBD_GetLen+0x12>
  }

  return len;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006cea:	2010      	movs	r0, #16
 8006cec:	f000 fe6e 	bl	80079cc <malloc>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d105      	bne.n	8006d06 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006d02:	2302      	movs	r3, #2
 8006d04:	e01b      	b.n	8006d3e <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	7c1b      	ldrb	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2207      	movs	r2, #7
 8006d1a:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006d1c:	e002      	b.n	8006d24 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	220a      	movs	r2, #10
 8006d22:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006d24:	2304      	movs	r3, #4
 8006d26:	2203      	movs	r2, #3
 8006d28:	2181      	movs	r1, #129	; 0x81
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fce7 	bl	80076fe <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006d52:	2181      	movs	r1, #129	; 0x81
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fcf8 	bl	800774a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fe30 	bl	80079dc <free>
    pdev->pClassData = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006da0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d045      	beq.n	8006e42 <USBD_HID_Setup+0xb2>
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	f040 80d4 	bne.w	8006f64 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	3b02      	subs	r3, #2
 8006dc2:	2b09      	cmp	r3, #9
 8006dc4:	d835      	bhi.n	8006e32 <USBD_HID_Setup+0xa2>
 8006dc6:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <USBD_HID_Setup+0x3c>)
 8006dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dcc:	08006e23 	.word	0x08006e23
 8006dd0:	08006e03 	.word	0x08006e03
 8006dd4:	08006e33 	.word	0x08006e33
 8006dd8:	08006e33 	.word	0x08006e33
 8006ddc:	08006e33 	.word	0x08006e33
 8006de0:	08006e33 	.word	0x08006e33
 8006de4:	08006e33 	.word	0x08006e33
 8006de8:	08006e33 	.word	0x08006e33
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	08006df5 	.word	0x08006df5
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	885b      	ldrh	r3, [r3, #2]
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	601a      	str	r2, [r3, #0]
      break;
 8006e00:	e01e      	b.n	8006e40 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f92f 	bl	800706c <USBD_CtlSendData>
      break;
 8006e0e:	e017      	b.n	8006e40 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	885b      	ldrh	r3, [r3, #2]
 8006e14:	0a1b      	lsrs	r3, r3, #8
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]
      break;
 8006e20:	e00e      	b.n	8006e40 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3304      	adds	r3, #4
 8006e26:	2201      	movs	r2, #1
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f91e 	bl	800706c <USBD_CtlSendData>
      break;
 8006e30:	e006      	b.n	8006e40 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff fee1 	bl	8006bfc <USBD_CtlError>
      ret = USBD_FAIL;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3e:	bf00      	nop
    }
    break;
 8006e40:	e097      	b.n	8006f72 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b0b      	cmp	r3, #11
 8006e48:	f200 8083 	bhi.w	8006f52 <USBD_HID_Setup+0x1c2>
 8006e4c:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <USBD_HID_Setup+0xc4>)
 8006e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e52:	bf00      	nop
 8006e54:	08006e85 	.word	0x08006e85
 8006e58:	08006f61 	.word	0x08006f61
 8006e5c:	08006f53 	.word	0x08006f53
 8006e60:	08006f53 	.word	0x08006f53
 8006e64:	08006f53 	.word	0x08006f53
 8006e68:	08006f53 	.word	0x08006f53
 8006e6c:	08006ead 	.word	0x08006ead
 8006e70:	08006f53 	.word	0x08006f53
 8006e74:	08006f53 	.word	0x08006f53
 8006e78:	08006f53 	.word	0x08006f53
 8006e7c:	08006f05 	.word	0x08006f05
 8006e80:	08006f2d 	.word	0x08006f2d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d107      	bne.n	8006e9e <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e8e:	f107 030a 	add.w	r3, r7, #10
 8006e92:	2202      	movs	r2, #2
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f8e8 	bl	800706c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e9c:	e061      	b.n	8006f62 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff feab 	bl	8006bfc <USBD_CtlError>
        ret = USBD_FAIL;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eaa:	e05a      	b.n	8006f62 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	885b      	ldrh	r3, [r3, #2]
 8006eb0:	0a1b      	lsrs	r3, r3, #8
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b22      	cmp	r3, #34	; 0x22
 8006eb6:	d108      	bne.n	8006eca <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	88db      	ldrh	r3, [r3, #6]
 8006ebc:	2b4d      	cmp	r3, #77	; 0x4d
 8006ebe:	bf28      	it	cs
 8006ec0:	234d      	movcs	r3, #77	; 0x4d
 8006ec2:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8006ec4:	4b2d      	ldr	r3, [pc, #180]	; (8006f7c <USBD_HID_Setup+0x1ec>)
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	e015      	b.n	8006ef6 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	885b      	ldrh	r3, [r3, #2]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b21      	cmp	r3, #33	; 0x21
 8006ed4:	d108      	bne.n	8006ee8 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8006ed6:	4b2a      	ldr	r3, [pc, #168]	; (8006f80 <USBD_HID_Setup+0x1f0>)
 8006ed8:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	88db      	ldrh	r3, [r3, #6]
 8006ede:	2b09      	cmp	r3, #9
 8006ee0:	bf28      	it	cs
 8006ee2:	2309      	movcs	r3, #9
 8006ee4:	82bb      	strh	r3, [r7, #20]
 8006ee6:	e006      	b.n	8006ef6 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff fe86 	bl	8006bfc <USBD_CtlError>
        ret = USBD_FAIL;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	75fb      	strb	r3, [r7, #23]
        break;
 8006ef4:	e035      	b.n	8006f62 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ef6:	8abb      	ldrh	r3, [r7, #20]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6939      	ldr	r1, [r7, #16]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f8b5 	bl	800706c <USBD_CtlSendData>
      break;
 8006f02:	e02e      	b.n	8006f62 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d107      	bne.n	8006f1e <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3308      	adds	r3, #8
 8006f12:	2201      	movs	r2, #1
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f8a8 	bl	800706c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006f1c:	e021      	b.n	8006f62 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff fe6b 	bl	8006bfc <USBD_CtlError>
        ret = USBD_FAIL;
 8006f26:	2303      	movs	r3, #3
 8006f28:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2a:	e01a      	b.n	8006f62 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d106      	bne.n	8006f44 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	885b      	ldrh	r3, [r3, #2]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006f42:	e00e      	b.n	8006f62 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff fe58 	bl	8006bfc <USBD_CtlError>
        ret = USBD_FAIL;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f50:	e007      	b.n	8006f62 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff fe51 	bl	8006bfc <USBD_CtlError>
      ret = USBD_FAIL;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5e:	e000      	b.n	8006f62 <USBD_HID_Setup+0x1d2>
      break;
 8006f60:	bf00      	nop
    }
    break;
 8006f62:	e006      	b.n	8006f72 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff fe48 	bl	8006bfc <USBD_CtlError>
    ret = USBD_FAIL;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	75fb      	strb	r3, [r7, #23]
    break;
 8006f70:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200000cc 	.word	0x200000cc
 8006f80:	200000b4 	.word	0x200000b4

08006f84 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f98:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d10c      	bne.n	8006fbe <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	7b1b      	ldrb	r3, [r3, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d108      	bne.n	8006fbe <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	2181      	movs	r1, #129	; 0x81
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fc6e 	bl	800789a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2222      	movs	r2, #34	; 0x22
 8006fd4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8006fd6:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	20000048 	.word	0x20000048

08006fe8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2222      	movs	r2, #34	; 0x22
 8006ff4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8006ff6:	4b03      	ldr	r3, [pc, #12]	; (8007004 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	2000006c 	.word	0x2000006c

08007008 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2222      	movs	r2, #34	; 0x22
 8007014:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007016:	4b03      	ldr	r3, [pc, #12]	; (8007024 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	20000090 	.word	0x20000090

08007028 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800703a:	2200      	movs	r2, #0
 800703c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	220a      	movs	r2, #10
 8007058:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800705a:	4b03      	ldr	r3, [pc, #12]	; (8007068 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	200000c0 	.word	0x200000c0

0800706c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2202      	movs	r2, #2
 800707c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	2100      	movs	r1, #0
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 fc01 	bl	800789a <USBD_LL_Transmit>

  return USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	2100      	movs	r1, #0
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 fbf0 	bl	800789a <USBD_LL_Transmit>

  return USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fc00 	bl	80078dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2204      	movs	r2, #4
 80070f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070f6:	2300      	movs	r3, #0
 80070f8:	2200      	movs	r2, #0
 80070fa:	2100      	movs	r1, #0
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fbcc 	bl	800789a <USBD_LL_Transmit>

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2205      	movs	r2, #5
 8007118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800711c:	2300      	movs	r3, #0
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fbda 	bl	80078dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007138:	2200      	movs	r2, #0
 800713a:	490f      	ldr	r1, [pc, #60]	; (8007178 <MX_USB_DEVICE_Init+0x44>)
 800713c:	480f      	ldr	r0, [pc, #60]	; (800717c <MX_USB_DEVICE_Init+0x48>)
 800713e:	f7fe fd49 	bl	8005bd4 <USBD_Init>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007148:	f7f9 fbd8 	bl	80008fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800714c:	490c      	ldr	r1, [pc, #48]	; (8007180 <MX_USB_DEVICE_Init+0x4c>)
 800714e:	480b      	ldr	r0, [pc, #44]	; (800717c <MX_USB_DEVICE_Init+0x48>)
 8007150:	f7fe fd76 	bl	8005c40 <USBD_RegisterClass>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800715a:	f7f9 fbcf 	bl	80008fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800715e:	4807      	ldr	r0, [pc, #28]	; (800717c <MX_USB_DEVICE_Init+0x48>)
 8007160:	f7fe fd8f 	bl	8005c82 <USBD_Start>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800716a:	f7f9 fbc7 	bl	80008fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800716e:	f7fb fa4b 	bl	8002608 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007172:	bf00      	nop
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	2000011c 	.word	0x2000011c
 800717c:	20000204 	.word	0x20000204
 8007180:	20000010 	.word	0x20000010

08007184 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2212      	movs	r2, #18
 8007194:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007196:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	20000138 	.word	0x20000138

080071a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	6039      	str	r1, [r7, #0]
 80071b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2204      	movs	r2, #4
 80071b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80071ba:	4b03      	ldr	r3, [pc, #12]	; (80071c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	2000014c 	.word	0x2000014c

080071cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	4907      	ldr	r1, [pc, #28]	; (8007200 <USBD_FS_ProductStrDescriptor+0x34>)
 80071e2:	4808      	ldr	r0, [pc, #32]	; (8007204 <USBD_FS_ProductStrDescriptor+0x38>)
 80071e4:	f7ff fd1b 	bl	8006c1e <USBD_GetString>
 80071e8:	e004      	b.n	80071f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	4904      	ldr	r1, [pc, #16]	; (8007200 <USBD_FS_ProductStrDescriptor+0x34>)
 80071ee:	4805      	ldr	r0, [pc, #20]	; (8007204 <USBD_FS_ProductStrDescriptor+0x38>)
 80071f0:	f7ff fd15 	bl	8006c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80071f4:	4b02      	ldr	r3, [pc, #8]	; (8007200 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	200004d4 	.word	0x200004d4
 8007204:	08007b88 	.word	0x08007b88

08007208 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	6039      	str	r1, [r7, #0]
 8007212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	4904      	ldr	r1, [pc, #16]	; (8007228 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007218:	4804      	ldr	r0, [pc, #16]	; (800722c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800721a:	f7ff fd00 	bl	8006c1e <USBD_GetString>
  return USBD_StrDesc;
 800721e:	4b02      	ldr	r3, [pc, #8]	; (8007228 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007220:	4618      	mov	r0, r3
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	200004d4 	.word	0x200004d4
 800722c:	08007ba0 	.word	0x08007ba0

08007230 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	6039      	str	r1, [r7, #0]
 800723a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	221a      	movs	r2, #26
 8007240:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007242:	f000 f843 	bl	80072cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007246:	4b02      	ldr	r3, [pc, #8]	; (8007250 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000150 	.word	0x20000150

08007254 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	6039      	str	r1, [r7, #0]
 800725e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	4907      	ldr	r1, [pc, #28]	; (8007288 <USBD_FS_ConfigStrDescriptor+0x34>)
 800726a:	4808      	ldr	r0, [pc, #32]	; (800728c <USBD_FS_ConfigStrDescriptor+0x38>)
 800726c:	f7ff fcd7 	bl	8006c1e <USBD_GetString>
 8007270:	e004      	b.n	800727c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	4904      	ldr	r1, [pc, #16]	; (8007288 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007276:	4805      	ldr	r0, [pc, #20]	; (800728c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007278:	f7ff fcd1 	bl	8006c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	200004d4 	.word	0x200004d4
 800728c:	08007bb4 	.word	0x08007bb4

08007290 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	4603      	mov	r3, r0
 8007298:	6039      	str	r1, [r7, #0]
 800729a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d105      	bne.n	80072ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	4907      	ldr	r1, [pc, #28]	; (80072c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072a6:	4808      	ldr	r0, [pc, #32]	; (80072c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072a8:	f7ff fcb9 	bl	8006c1e <USBD_GetString>
 80072ac:	e004      	b.n	80072b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	4904      	ldr	r1, [pc, #16]	; (80072c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072b2:	4805      	ldr	r0, [pc, #20]	; (80072c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072b4:	f7ff fcb3 	bl	8006c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80072b8:	4b02      	ldr	r3, [pc, #8]	; (80072c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	200004d4 	.word	0x200004d4
 80072c8:	08007bc0 	.word	0x08007bc0

080072cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80072d2:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <Get_SerialNum+0x44>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072d8:	4b0e      	ldr	r3, [pc, #56]	; (8007314 <Get_SerialNum+0x48>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072de:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <Get_SerialNum+0x4c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4413      	add	r3, r2
 80072ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d009      	beq.n	8007306 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072f2:	2208      	movs	r2, #8
 80072f4:	4909      	ldr	r1, [pc, #36]	; (800731c <Get_SerialNum+0x50>)
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f814 	bl	8007324 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072fc:	2204      	movs	r2, #4
 80072fe:	4908      	ldr	r1, [pc, #32]	; (8007320 <Get_SerialNum+0x54>)
 8007300:	68b8      	ldr	r0, [r7, #8]
 8007302:	f000 f80f 	bl	8007324 <IntToUnicode>
  }
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	1ff1e800 	.word	0x1ff1e800
 8007314:	1ff1e804 	.word	0x1ff1e804
 8007318:	1ff1e808 	.word	0x1ff1e808
 800731c:	20000152 	.word	0x20000152
 8007320:	20000162 	.word	0x20000162

08007324 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007336:	2300      	movs	r3, #0
 8007338:	75fb      	strb	r3, [r7, #23]
 800733a:	e027      	b.n	800738c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	0f1b      	lsrs	r3, r3, #28
 8007340:	2b09      	cmp	r3, #9
 8007342:	d80b      	bhi.n	800735c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	0f1b      	lsrs	r3, r3, #28
 8007348:	b2da      	uxtb	r2, r3
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	4619      	mov	r1, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	440b      	add	r3, r1
 8007354:	3230      	adds	r2, #48	; 0x30
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e00a      	b.n	8007372 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	0f1b      	lsrs	r3, r3, #28
 8007360:	b2da      	uxtb	r2, r3
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4619      	mov	r1, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	440b      	add	r3, r1
 800736c:	3237      	adds	r2, #55	; 0x37
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	3301      	adds	r3, #1
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	4413      	add	r3, r2
 8007382:	2200      	movs	r2, #0
 8007384:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	3301      	adds	r3, #1
 800738a:	75fb      	strb	r3, [r7, #23]
 800738c:	7dfa      	ldrb	r2, [r7, #23]
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	429a      	cmp	r2, r3
 8007392:	d3d3      	bcc.n	800733c <IntToUnicode+0x18>
  }
}
 8007394:	bf00      	nop
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	; 0x28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073a8:	f107 0314 	add.w	r3, r7, #20
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	605a      	str	r2, [r3, #4]
 80073b2:	609a      	str	r2, [r3, #8]
 80073b4:	60da      	str	r2, [r3, #12]
 80073b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <HAL_PCD_MspInit+0x98>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d136      	bne.n	8007430 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073c2:	4b1e      	ldr	r3, [pc, #120]	; (800743c <HAL_PCD_MspInit+0x9c>)
 80073c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073c8:	4a1c      	ldr	r2, [pc, #112]	; (800743c <HAL_PCD_MspInit+0x9c>)
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073d2:	4b1a      	ldr	r3, [pc, #104]	; (800743c <HAL_PCD_MspInit+0x9c>)
 80073d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	613b      	str	r3, [r7, #16]
 80073de:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 80073e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073e6:	2302      	movs	r3, #2
 80073e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ee:	2300      	movs	r3, #0
 80073f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80073f2:	230a      	movs	r3, #10
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073f6:	f107 0314 	add.w	r3, r7, #20
 80073fa:	4619      	mov	r1, r3
 80073fc:	4810      	ldr	r0, [pc, #64]	; (8007440 <HAL_PCD_MspInit+0xa0>)
 80073fe:	f7f9 fd07 	bl	8000e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007402:	4b0e      	ldr	r3, [pc, #56]	; (800743c <HAL_PCD_MspInit+0x9c>)
 8007404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007408:	4a0c      	ldr	r2, [pc, #48]	; (800743c <HAL_PCD_MspInit+0x9c>)
 800740a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800740e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007412:	4b0a      	ldr	r3, [pc, #40]	; (800743c <HAL_PCD_MspInit+0x9c>)
 8007414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007420:	2200      	movs	r2, #0
 8007422:	2100      	movs	r1, #0
 8007424:	2065      	movs	r0, #101	; 0x65
 8007426:	f7f9 fcbe 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800742a:	2065      	movs	r0, #101	; 0x65
 800742c:	f7f9 fcd5 	bl	8000dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007430:	bf00      	nop
 8007432:	3728      	adds	r7, #40	; 0x28
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40080000 	.word	0x40080000
 800743c:	58024400 	.word	0x58024400
 8007440:	58020000 	.word	0x58020000

08007444 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f7fe fc5c 	bl	8005d18 <USBD_LL_SetupStage>
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800747a:	78fa      	ldrb	r2, [r7, #3]
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	4613      	mov	r3, r2
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	440b      	add	r3, r1
 8007488:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	4619      	mov	r1, r3
 8007492:	f7fe fc94 	bl	8005dbe <USBD_LL_DataOutStage>
}
 8007496:	bf00      	nop
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	460b      	mov	r3, r1
 80074a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80074b0:	78fa      	ldrb	r2, [r7, #3]
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	4613      	mov	r3, r2
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	1a9b      	subs	r3, r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	3348      	adds	r3, #72	; 0x48
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	4619      	mov	r1, r3
 80074c6:	f7fe fcdd 	bl	8005e84 <USBD_LL_DataInStage>
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe fde1 	bl	80060a8 <USBD_LL_SOF>
}
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074f6:	2301      	movs	r3, #1
 80074f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
 8007506:	e008      	b.n	800751a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d102      	bne.n	8007516 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007510:	2301      	movs	r3, #1
 8007512:	73fb      	strb	r3, [r7, #15]
 8007514:	e001      	b.n	800751a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007516:	f7f9 f9f1 	bl	80008fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007520:	7bfa      	ldrb	r2, [r7, #15]
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe fd84 	bl	8006032 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fd3d 	bl	8005fb0 <USBD_LL_Reset>
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe fd7f 	bl	8006052 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6812      	ldr	r2, [r2, #0]
 8007562:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007566:	f043 0301 	orr.w	r3, r3, #1
 800756a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007574:	4b04      	ldr	r3, [pc, #16]	; (8007588 <HAL_PCD_SuspendCallback+0x48>)
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	4a03      	ldr	r2, [pc, #12]	; (8007588 <HAL_PCD_SuspendCallback+0x48>)
 800757a:	f043 0306 	orr.w	r3, r3, #6
 800757e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	e000ed00 	.word	0xe000ed00

0800758c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fd6e 	bl	800607c <USBD_LL_Resume>
}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	4611      	mov	r1, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fd99 	bl	80060f6 <USBD_LL_IsoOUTIncomplete>
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075de:	78fa      	ldrb	r2, [r7, #3]
 80075e0:	4611      	mov	r1, r2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe fd7a 	bl	80060dc <USBD_LL_IsoINIncomplete>
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fd86 	bl	8006110 <USBD_LL_DevConnected>
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe fd83 	bl	8006126 <USBD_LL_DevDisconnected>
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d13e      	bne.n	80076b6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007638:	4a21      	ldr	r2, [pc, #132]	; (80076c0 <USBD_LL_Init+0x98>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <USBD_LL_Init+0x98>)
 8007644:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007648:	4b1d      	ldr	r3, [pc, #116]	; (80076c0 <USBD_LL_Init+0x98>)
 800764a:	4a1e      	ldr	r2, [pc, #120]	; (80076c4 <USBD_LL_Init+0x9c>)
 800764c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800764e:	4b1c      	ldr	r3, [pc, #112]	; (80076c0 <USBD_LL_Init+0x98>)
 8007650:	2209      	movs	r2, #9
 8007652:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007654:	4b1a      	ldr	r3, [pc, #104]	; (80076c0 <USBD_LL_Init+0x98>)
 8007656:	2202      	movs	r2, #2
 8007658:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800765a:	4b19      	ldr	r3, [pc, #100]	; (80076c0 <USBD_LL_Init+0x98>)
 800765c:	2200      	movs	r2, #0
 800765e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007660:	4b17      	ldr	r3, [pc, #92]	; (80076c0 <USBD_LL_Init+0x98>)
 8007662:	2202      	movs	r2, #2
 8007664:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007666:	4b16      	ldr	r3, [pc, #88]	; (80076c0 <USBD_LL_Init+0x98>)
 8007668:	2200      	movs	r2, #0
 800766a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800766c:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <USBD_LL_Init+0x98>)
 800766e:	2200      	movs	r2, #0
 8007670:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <USBD_LL_Init+0x98>)
 8007674:	2200      	movs	r2, #0
 8007676:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007678:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <USBD_LL_Init+0x98>)
 800767a:	2200      	movs	r2, #0
 800767c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800767e:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <USBD_LL_Init+0x98>)
 8007680:	2200      	movs	r2, #0
 8007682:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007684:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <USBD_LL_Init+0x98>)
 8007686:	2200      	movs	r2, #0
 8007688:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800768a:	480d      	ldr	r0, [pc, #52]	; (80076c0 <USBD_LL_Init+0x98>)
 800768c:	f7f9 fd9e 	bl	80011cc <HAL_PCD_Init>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8007696:	f7f9 f931 	bl	80008fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800769a:	2180      	movs	r1, #128	; 0x80
 800769c:	4808      	ldr	r0, [pc, #32]	; (80076c0 <USBD_LL_Init+0x98>)
 800769e:	f7fa ff18 	bl	80024d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80076a2:	2240      	movs	r2, #64	; 0x40
 80076a4:	2100      	movs	r1, #0
 80076a6:	4806      	ldr	r0, [pc, #24]	; (80076c0 <USBD_LL_Init+0x98>)
 80076a8:	f7fa fecc 	bl	8002444 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80076ac:	2280      	movs	r2, #128	; 0x80
 80076ae:	2101      	movs	r1, #1
 80076b0:	4803      	ldr	r0, [pc, #12]	; (80076c0 <USBD_LL_Init+0x98>)
 80076b2:	f7fa fec7 	bl	8002444 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	200006d4 	.word	0x200006d4
 80076c4:	40080000 	.word	0x40080000

080076c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076de:	4618      	mov	r0, r3
 80076e0:	f7f9 fe98 	bl	8001414 <HAL_PCD_Start>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 f918 	bl	8007920 <USBD_Get_USB_Status>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	4608      	mov	r0, r1
 8007708:	4611      	mov	r1, r2
 800770a:	461a      	mov	r2, r3
 800770c:	4603      	mov	r3, r0
 800770e:	70fb      	strb	r3, [r7, #3]
 8007710:	460b      	mov	r3, r1
 8007712:	70bb      	strb	r3, [r7, #2]
 8007714:	4613      	mov	r3, r2
 8007716:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007726:	78bb      	ldrb	r3, [r7, #2]
 8007728:	883a      	ldrh	r2, [r7, #0]
 800772a:	78f9      	ldrb	r1, [r7, #3]
 800772c:	f7fa faa9 	bl	8001c82 <HAL_PCD_EP_Open>
 8007730:	4603      	mov	r3, r0
 8007732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 f8f2 	bl	8007920 <USBD_Get_USB_Status>
 800773c:	4603      	mov	r3, r0
 800773e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007740:	7bbb      	ldrb	r3, [r7, #14]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f7fa faf2 	bl	8001d52 <HAL_PCD_EP_Close>
 800776e:	4603      	mov	r3, r0
 8007770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f8d3 	bl	8007920 <USBD_Get_USB_Status>
 800777a:	4603      	mov	r3, r0
 800777c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800777e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077a2:	78fa      	ldrb	r2, [r7, #3]
 80077a4:	4611      	mov	r1, r2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fa fbb2 	bl	8001f10 <HAL_PCD_EP_SetStall>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 f8b4 	bl	8007920 <USBD_Get_USB_Status>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	4611      	mov	r1, r2
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fa fbf7 	bl	8001fd8 <HAL_PCD_EP_ClrStall>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 f895 	bl	8007920 <USBD_Get_USB_Status>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007816:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800781c:	2b00      	cmp	r3, #0
 800781e:	da0b      	bge.n	8007838 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	4613      	mov	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	333e      	adds	r3, #62	; 0x3e
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	e00b      	b.n	8007850 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800783e:	68f9      	ldr	r1, [r7, #12]
 8007840:	4613      	mov	r3, r2
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800784e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007876:	78fa      	ldrb	r2, [r7, #3]
 8007878:	4611      	mov	r1, r2
 800787a:	4618      	mov	r0, r3
 800787c:	f7fa f9dc 	bl	8001c38 <HAL_PCD_SetAddress>
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f84a 	bl	8007920 <USBD_Get_USB_Status>
 800788c:	4603      	mov	r3, r0
 800788e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007890:	7bbb      	ldrb	r3, [r7, #14]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b086      	sub	sp, #24
 800789e:	af00      	add	r7, sp, #0
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
 80078a6:	460b      	mov	r3, r1
 80078a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80078b8:	7af9      	ldrb	r1, [r7, #11]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	f7fa fadd 	bl	8001e7c <HAL_PCD_EP_Transmit>
 80078c2:	4603      	mov	r3, r0
 80078c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 f829 	bl	8007920 <USBD_Get_USB_Status>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	460b      	mov	r3, r1
 80078ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80078fa:	7af9      	ldrb	r1, [r7, #11]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	f7fa fa71 	bl	8001de6 <HAL_PCD_EP_Receive>
 8007904:	4603      	mov	r3, r0
 8007906:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007908:	7dfb      	ldrb	r3, [r7, #23]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 f808 	bl	8007920 <USBD_Get_USB_Status>
 8007910:	4603      	mov	r3, r0
 8007912:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007914:	7dbb      	ldrb	r3, [r7, #22]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	2b03      	cmp	r3, #3
 8007932:	d817      	bhi.n	8007964 <USBD_Get_USB_Status+0x44>
 8007934:	a201      	add	r2, pc, #4	; (adr r2, 800793c <USBD_Get_USB_Status+0x1c>)
 8007936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793a:	bf00      	nop
 800793c:	0800794d 	.word	0x0800794d
 8007940:	08007953 	.word	0x08007953
 8007944:	08007959 	.word	0x08007959
 8007948:	0800795f 	.word	0x0800795f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]
    break;
 8007950:	e00b      	b.n	800796a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007952:	2303      	movs	r3, #3
 8007954:	73fb      	strb	r3, [r7, #15]
    break;
 8007956:	e008      	b.n	800796a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007958:	2301      	movs	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
    break;
 800795c:	e005      	b.n	800796a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800795e:	2303      	movs	r3, #3
 8007960:	73fb      	strb	r3, [r7, #15]
    break;
 8007962:	e002      	b.n	800796a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007964:	2303      	movs	r3, #3
 8007966:	73fb      	strb	r3, [r7, #15]
    break;
 8007968:	bf00      	nop
  }
  return usb_status;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <__errno>:
 8007978:	4b01      	ldr	r3, [pc, #4]	; (8007980 <__errno+0x8>)
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	2000016c 	.word	0x2000016c

08007984 <__libc_init_array>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	4e0d      	ldr	r6, [pc, #52]	; (80079bc <__libc_init_array+0x38>)
 8007988:	4c0d      	ldr	r4, [pc, #52]	; (80079c0 <__libc_init_array+0x3c>)
 800798a:	1ba4      	subs	r4, r4, r6
 800798c:	10a4      	asrs	r4, r4, #2
 800798e:	2500      	movs	r5, #0
 8007990:	42a5      	cmp	r5, r4
 8007992:	d109      	bne.n	80079a8 <__libc_init_array+0x24>
 8007994:	4e0b      	ldr	r6, [pc, #44]	; (80079c4 <__libc_init_array+0x40>)
 8007996:	4c0c      	ldr	r4, [pc, #48]	; (80079c8 <__libc_init_array+0x44>)
 8007998:	f000 f8ea 	bl	8007b70 <_init>
 800799c:	1ba4      	subs	r4, r4, r6
 800799e:	10a4      	asrs	r4, r4, #2
 80079a0:	2500      	movs	r5, #0
 80079a2:	42a5      	cmp	r5, r4
 80079a4:	d105      	bne.n	80079b2 <__libc_init_array+0x2e>
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079ac:	4798      	blx	r3
 80079ae:	3501      	adds	r5, #1
 80079b0:	e7ee      	b.n	8007990 <__libc_init_array+0xc>
 80079b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079b6:	4798      	blx	r3
 80079b8:	3501      	adds	r5, #1
 80079ba:	e7f2      	b.n	80079a2 <__libc_init_array+0x1e>
 80079bc:	08007be0 	.word	0x08007be0
 80079c0:	08007be0 	.word	0x08007be0
 80079c4:	08007be0 	.word	0x08007be0
 80079c8:	08007be4 	.word	0x08007be4

080079cc <malloc>:
 80079cc:	4b02      	ldr	r3, [pc, #8]	; (80079d8 <malloc+0xc>)
 80079ce:	4601      	mov	r1, r0
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	f000 b861 	b.w	8007a98 <_malloc_r>
 80079d6:	bf00      	nop
 80079d8:	2000016c 	.word	0x2000016c

080079dc <free>:
 80079dc:	4b02      	ldr	r3, [pc, #8]	; (80079e8 <free+0xc>)
 80079de:	4601      	mov	r1, r0
 80079e0:	6818      	ldr	r0, [r3, #0]
 80079e2:	f000 b80b 	b.w	80079fc <_free_r>
 80079e6:	bf00      	nop
 80079e8:	2000016c 	.word	0x2000016c

080079ec <memset>:
 80079ec:	4402      	add	r2, r0
 80079ee:	4603      	mov	r3, r0
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d100      	bne.n	80079f6 <memset+0xa>
 80079f4:	4770      	bx	lr
 80079f6:	f803 1b01 	strb.w	r1, [r3], #1
 80079fa:	e7f9      	b.n	80079f0 <memset+0x4>

080079fc <_free_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4605      	mov	r5, r0
 8007a00:	2900      	cmp	r1, #0
 8007a02:	d045      	beq.n	8007a90 <_free_r+0x94>
 8007a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a08:	1f0c      	subs	r4, r1, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bfb8      	it	lt
 8007a0e:	18e4      	addlt	r4, r4, r3
 8007a10:	f000 f8ac 	bl	8007b6c <__malloc_lock>
 8007a14:	4a1f      	ldr	r2, [pc, #124]	; (8007a94 <_free_r+0x98>)
 8007a16:	6813      	ldr	r3, [r2, #0]
 8007a18:	4610      	mov	r0, r2
 8007a1a:	b933      	cbnz	r3, 8007a2a <_free_r+0x2e>
 8007a1c:	6063      	str	r3, [r4, #4]
 8007a1e:	6014      	str	r4, [r2, #0]
 8007a20:	4628      	mov	r0, r5
 8007a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a26:	f000 b8a2 	b.w	8007b6e <__malloc_unlock>
 8007a2a:	42a3      	cmp	r3, r4
 8007a2c:	d90c      	bls.n	8007a48 <_free_r+0x4c>
 8007a2e:	6821      	ldr	r1, [r4, #0]
 8007a30:	1862      	adds	r2, r4, r1
 8007a32:	4293      	cmp	r3, r2
 8007a34:	bf04      	itt	eq
 8007a36:	681a      	ldreq	r2, [r3, #0]
 8007a38:	685b      	ldreq	r3, [r3, #4]
 8007a3a:	6063      	str	r3, [r4, #4]
 8007a3c:	bf04      	itt	eq
 8007a3e:	1852      	addeq	r2, r2, r1
 8007a40:	6022      	streq	r2, [r4, #0]
 8007a42:	6004      	str	r4, [r0, #0]
 8007a44:	e7ec      	b.n	8007a20 <_free_r+0x24>
 8007a46:	4613      	mov	r3, r2
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	b10a      	cbz	r2, 8007a50 <_free_r+0x54>
 8007a4c:	42a2      	cmp	r2, r4
 8007a4e:	d9fa      	bls.n	8007a46 <_free_r+0x4a>
 8007a50:	6819      	ldr	r1, [r3, #0]
 8007a52:	1858      	adds	r0, r3, r1
 8007a54:	42a0      	cmp	r0, r4
 8007a56:	d10b      	bne.n	8007a70 <_free_r+0x74>
 8007a58:	6820      	ldr	r0, [r4, #0]
 8007a5a:	4401      	add	r1, r0
 8007a5c:	1858      	adds	r0, r3, r1
 8007a5e:	4282      	cmp	r2, r0
 8007a60:	6019      	str	r1, [r3, #0]
 8007a62:	d1dd      	bne.n	8007a20 <_free_r+0x24>
 8007a64:	6810      	ldr	r0, [r2, #0]
 8007a66:	6852      	ldr	r2, [r2, #4]
 8007a68:	605a      	str	r2, [r3, #4]
 8007a6a:	4401      	add	r1, r0
 8007a6c:	6019      	str	r1, [r3, #0]
 8007a6e:	e7d7      	b.n	8007a20 <_free_r+0x24>
 8007a70:	d902      	bls.n	8007a78 <_free_r+0x7c>
 8007a72:	230c      	movs	r3, #12
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	e7d3      	b.n	8007a20 <_free_r+0x24>
 8007a78:	6820      	ldr	r0, [r4, #0]
 8007a7a:	1821      	adds	r1, r4, r0
 8007a7c:	428a      	cmp	r2, r1
 8007a7e:	bf04      	itt	eq
 8007a80:	6811      	ldreq	r1, [r2, #0]
 8007a82:	6852      	ldreq	r2, [r2, #4]
 8007a84:	6062      	str	r2, [r4, #4]
 8007a86:	bf04      	itt	eq
 8007a88:	1809      	addeq	r1, r1, r0
 8007a8a:	6021      	streq	r1, [r4, #0]
 8007a8c:	605c      	str	r4, [r3, #4]
 8007a8e:	e7c7      	b.n	8007a20 <_free_r+0x24>
 8007a90:	bd38      	pop	{r3, r4, r5, pc}
 8007a92:	bf00      	nop
 8007a94:	200001f8 	.word	0x200001f8

08007a98 <_malloc_r>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	1ccd      	adds	r5, r1, #3
 8007a9c:	f025 0503 	bic.w	r5, r5, #3
 8007aa0:	3508      	adds	r5, #8
 8007aa2:	2d0c      	cmp	r5, #12
 8007aa4:	bf38      	it	cc
 8007aa6:	250c      	movcc	r5, #12
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	4606      	mov	r6, r0
 8007aac:	db01      	blt.n	8007ab2 <_malloc_r+0x1a>
 8007aae:	42a9      	cmp	r1, r5
 8007ab0:	d903      	bls.n	8007aba <_malloc_r+0x22>
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	6033      	str	r3, [r6, #0]
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	bd70      	pop	{r4, r5, r6, pc}
 8007aba:	f000 f857 	bl	8007b6c <__malloc_lock>
 8007abe:	4a21      	ldr	r2, [pc, #132]	; (8007b44 <_malloc_r+0xac>)
 8007ac0:	6814      	ldr	r4, [r2, #0]
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	b991      	cbnz	r1, 8007aec <_malloc_r+0x54>
 8007ac6:	4c20      	ldr	r4, [pc, #128]	; (8007b48 <_malloc_r+0xb0>)
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	b91b      	cbnz	r3, 8007ad4 <_malloc_r+0x3c>
 8007acc:	4630      	mov	r0, r6
 8007ace:	f000 f83d 	bl	8007b4c <_sbrk_r>
 8007ad2:	6020      	str	r0, [r4, #0]
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f000 f838 	bl	8007b4c <_sbrk_r>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d124      	bne.n	8007b2a <_malloc_r+0x92>
 8007ae0:	230c      	movs	r3, #12
 8007ae2:	6033      	str	r3, [r6, #0]
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f000 f842 	bl	8007b6e <__malloc_unlock>
 8007aea:	e7e4      	b.n	8007ab6 <_malloc_r+0x1e>
 8007aec:	680b      	ldr	r3, [r1, #0]
 8007aee:	1b5b      	subs	r3, r3, r5
 8007af0:	d418      	bmi.n	8007b24 <_malloc_r+0x8c>
 8007af2:	2b0b      	cmp	r3, #11
 8007af4:	d90f      	bls.n	8007b16 <_malloc_r+0x7e>
 8007af6:	600b      	str	r3, [r1, #0]
 8007af8:	50cd      	str	r5, [r1, r3]
 8007afa:	18cc      	adds	r4, r1, r3
 8007afc:	4630      	mov	r0, r6
 8007afe:	f000 f836 	bl	8007b6e <__malloc_unlock>
 8007b02:	f104 000b 	add.w	r0, r4, #11
 8007b06:	1d23      	adds	r3, r4, #4
 8007b08:	f020 0007 	bic.w	r0, r0, #7
 8007b0c:	1ac3      	subs	r3, r0, r3
 8007b0e:	d0d3      	beq.n	8007ab8 <_malloc_r+0x20>
 8007b10:	425a      	negs	r2, r3
 8007b12:	50e2      	str	r2, [r4, r3]
 8007b14:	e7d0      	b.n	8007ab8 <_malloc_r+0x20>
 8007b16:	428c      	cmp	r4, r1
 8007b18:	684b      	ldr	r3, [r1, #4]
 8007b1a:	bf16      	itet	ne
 8007b1c:	6063      	strne	r3, [r4, #4]
 8007b1e:	6013      	streq	r3, [r2, #0]
 8007b20:	460c      	movne	r4, r1
 8007b22:	e7eb      	b.n	8007afc <_malloc_r+0x64>
 8007b24:	460c      	mov	r4, r1
 8007b26:	6849      	ldr	r1, [r1, #4]
 8007b28:	e7cc      	b.n	8007ac4 <_malloc_r+0x2c>
 8007b2a:	1cc4      	adds	r4, r0, #3
 8007b2c:	f024 0403 	bic.w	r4, r4, #3
 8007b30:	42a0      	cmp	r0, r4
 8007b32:	d005      	beq.n	8007b40 <_malloc_r+0xa8>
 8007b34:	1a21      	subs	r1, r4, r0
 8007b36:	4630      	mov	r0, r6
 8007b38:	f000 f808 	bl	8007b4c <_sbrk_r>
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d0cf      	beq.n	8007ae0 <_malloc_r+0x48>
 8007b40:	6025      	str	r5, [r4, #0]
 8007b42:	e7db      	b.n	8007afc <_malloc_r+0x64>
 8007b44:	200001f8 	.word	0x200001f8
 8007b48:	200001fc 	.word	0x200001fc

08007b4c <_sbrk_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4c06      	ldr	r4, [pc, #24]	; (8007b68 <_sbrk_r+0x1c>)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4605      	mov	r5, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	f7f8 ff2a 	bl	80009b0 <_sbrk>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_sbrk_r+0x1a>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_sbrk_r+0x1a>
 8007b64:	602b      	str	r3, [r5, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20000adc 	.word	0x20000adc

08007b6c <__malloc_lock>:
 8007b6c:	4770      	bx	lr

08007b6e <__malloc_unlock>:
 8007b6e:	4770      	bx	lr

08007b70 <_init>:
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b72:	bf00      	nop
 8007b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b76:	bc08      	pop	{r3}
 8007b78:	469e      	mov	lr, r3
 8007b7a:	4770      	bx	lr

08007b7c <_fini>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr
